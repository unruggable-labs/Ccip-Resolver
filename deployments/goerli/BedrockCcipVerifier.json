{
  "address": "0x04D281A6080C37f9b62821299E58E12912420e60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "graphQlUrl",
          "type": "string"
        },
        {
          "internalType": "contract IBedrockProofVerifier",
          "name": "_bedrockProofVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newGraphQlUrl",
          "type": "string"
        }
      ],
      "name": "GraphQlUrlChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bedrockProofVerifier",
      "outputs": [
        {
          "internalType": "contract IBedrockProofVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "graphqlUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onResolveWithProof",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveWithProof",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_graphqlUrl",
          "type": "string"
        }
      ],
      "name": "setGraphUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7cde31ce8ffe6435de7de478c8eaf95d6167e9b63db25ce55d622d73e5fd915",
  "receipt": {
    "to": null,
    "from": "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "contractAddress": "0x04D281A6080C37f9b62821299E58E12912420e60",
    "transactionIndex": 21,
    "gasUsed": "1316139",
    "logsBloom": "0x
    "blockHash": "0xc60ec7a76bd34ae53df5a64f8bcab7bdf5941fe430c96cea10232cba1a8b7333",
    "transactionHash": "0xc7cde31ce8ffe6435de7de478c8eaf95d6167e9b63db25ce55d622d73e5fd915",
    "logs": [],
    "blockNumber": 9556295,
    "cumulativeGasUsed": "3758047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "http://localhost:8081",
    "0x84282bF86f09082f3d34a70ABf47D2d3Cc7a9ffb",
    "0x2389Cda3D5960fA4ce08162E2436AFA68Ef5BE85"
  ],
  "numDeployments": 1,
  "solcInputHash": "ad44380dd545887fea32917d51abcba9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"graphQlUrl\",\"type\":\"string\"},{\"internalType\":\"contract IBedrockProofVerifier\",\"name\":\"_bedrockProofVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newGraphQlUrl\",\"type\":\"string\"}],\"name\":\"GraphQlUrlChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bedrockProofVerifier\",\"outputs\":[{\"internalType\":\"contract IBedrockProofVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graphqlUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onResolveWithProof\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveWithProof\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_graphqlUrl\",\"type\":\"string\"}],\"name\":\"setGraphUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"metadata(bytes)\":{\"details\":\"This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\",\"returns\":{\"_0\":\"name The name of the resolver (\\\"CCIP RESOLVER\\\")\",\"_1\":\"coinType Resolvers coin type (60 for Ethereum)\",\"_2\":\"graphqlUrl The GraphQL URL used by the resolver\",\"_3\":\"storageType Storage Type (0 for EVM)\",\"_4\":\"storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\",\"_5\":\"context the owner of the name. Always returns address(0) since the owner is determined by the erc3668Resolver contract.\"}},\"onResolveWithProof(bytes,bytes)\":{\"returns\":{\"_0\":\"The function selector of the `resolveWithProof` function\"}},\"resolveWithProof(bytes,bytes)\":{\"details\":\"This function allows resolving a response along with a proof provided by IBedrockProofVerifier.\",\"params\":{\"extraData\":\"The original data passed to the request\",\"response\":\"The response data along with the associated proof\"},\"returns\":{\"_0\":\"The resolved response data encoded as bytes\"}},\"setGraphUrl(string)\":{\"details\":\"This function can only be called by the current owner.\",\"params\":{\"_graphqlUrl\":\"The new GraphQL endpoint URL to be set\"}},\"setOwner(address)\":{\"details\":\"This function can only be called by the current owner.\",\"params\":{\"_owner\":\"The address of the new owner\"}},\"supportsInterface(bytes4)\":{\"details\":\"This function checks if the contract supports the provided interface by comparing the `interfaceID` with the supported interface IDs.\",\"params\":{\"interfaceID\":\"The interface ID to check for support\"},\"returns\":{\"_0\":\"true if the contract supports the interface, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadata(bytes)\":{\"notice\":\"Get metadata about the CCIP Resolver\"},\"onResolveWithProof(bytes,bytes)\":{\"notice\":\"To support other to be resolved than just bytes it is possible to override this function. In that case the function selector of the overridden function should be returned. The default implementation returns the function selector of the `resolveWithProof` function.\"},\"owner()\":{\"notice\":\"The owner of the contract The owner of the contract can set the graphQlUrl and determine a new owner\"},\"resolveWithProof(bytes,bytes)\":{\"notice\":\"Resolve a response with a proof\"},\"setGraphUrl(string)\":{\"notice\":\"Set the GraphQL endpoint URL for the contract\"},\"setOwner(address)\":{\"notice\":\"Set the new owner of the contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports the given interface\"}},\"notice\":\"A type specific handler for verifying the validity of data returned by a gateway that pulls data from Optimism Bedrock\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier/optimism-bedrock/BedrockCcipVerifier.sol\":\"BedrockCcipVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@eth-optimism/contracts-bedrock/contracts/libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Types\\n * @notice Contains various types used throughout the Optimism contract system.\\n */\\nlibrary Types {\\n    /**\\n     * @notice OutputProposal represents a commitment to the L2 state. The timestamp is the L1\\n     *         timestamp that the output root is posted. This timestamp is used to verify that the\\n     *         finalization period has passed since the output root was submitted.\\n     *\\n     * @custom:field outputRoot    Hash of the L2 output.\\n     * @custom:field timestamp     Timestamp of the L1 block that the output root was submitted in.\\n     * @custom:field l2BlockNumber L2 block number that the output corresponds to.\\n     */\\n    struct OutputProposal {\\n        bytes32 outputRoot;\\n        uint128 timestamp;\\n        uint128 l2BlockNumber;\\n    }\\n\\n    /**\\n     * @notice Struct representing the elements that are hashed together to generate an output root\\n     *         which itself represents a snapshot of the L2 state.\\n     *\\n     * @custom:field version                  Version of the output root.\\n     * @custom:field stateRoot                Root of the state trie at the block of this output.\\n     * @custom:field messagePasserStorageRoot Root of the message passer storage trie.\\n     * @custom:field latestBlockhash          Hash of the block this output was generated from.\\n     */\\n    struct OutputRootProof {\\n        bytes32 version;\\n        bytes32 stateRoot;\\n        bytes32 messagePasserStorageRoot;\\n        bytes32 latestBlockhash;\\n    }\\n\\n    /**\\n     * @notice Struct representing a deposit transaction (L1 => L2 transaction) created by an end\\n     *         user (as opposed to a system deposit transaction generated by the system).\\n     *\\n     * @custom:field from        Address of the sender of the transaction.\\n     * @custom:field to          Address of the recipient of the transaction.\\n     * @custom:field isCreation  True if the transaction is a contract creation.\\n     * @custom:field value       Value to send to the recipient.\\n     * @custom:field mint        Amount of ETH to mint.\\n     * @custom:field gasLimit    Gas limit of the transaction.\\n     * @custom:field data        Data of the transaction.\\n     * @custom:field l1BlockHash Hash of the block the transaction was submitted in.\\n     * @custom:field logIndex    Index of the log in the block the transaction was submitted in.\\n     */\\n    struct UserDepositTransaction {\\n        address from;\\n        address to;\\n        bool isCreation;\\n        uint256 value;\\n        uint256 mint;\\n        uint64 gasLimit;\\n        bytes data;\\n        bytes32 l1BlockHash;\\n        uint256 logIndex;\\n    }\\n\\n    /**\\n     * @notice Struct representing a withdrawal transaction.\\n     *\\n     * @custom:field nonce    Nonce of the withdrawal transaction\\n     * @custom:field sender   Address of the sender of the transaction.\\n     * @custom:field target   Address of the recipient of the transaction.\\n     * @custom:field value    Value to send to the recipient.\\n     * @custom:field gasLimit Gas limit of the transaction.\\n     * @custom:field data     Data of the transaction.\\n     */\\n    struct WithdrawalTransaction {\\n        uint256 nonce;\\n        address sender;\\n        address target;\\n        uint256 value;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x4fe8ec920798661a828430bd30dc2715eeb40534ec01c0a7bf41cb4ab422e134\",\"license\":\"MIT\"},\"contracts/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n}\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xe0acf72daed5a8ef1473f9e7e6ec1c9549baf194c4b4f71e891337cff0b2c35b\",\"license\":\"MIT\"},\"contracts/coinType/Ensip11CoinType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nfunction convertEVMChainIdToCoinType(uint256 chainId) pure returns (uint256) {\\n    return (0x80000000 | chainId) >> 0;\\n}\\n\\nfunction convertCoinTypeToEVMChainId(uint256 coinType) pure returns (uint256) {\\n    return (0x7fffffff & coinType) >> 0;\\n}\\n\",\"keccak256\":\"0x1736a3eb5e414e21e45c8bc7eeafd022de41f69322212693a9958da9f09f2c39\",\"license\":\"MIT\"},\"contracts/verifier/CcipResponseVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ICcipResponseVerifier} from \\\"./ICcipResponseVerifier.sol\\\";\\nimport {SupportsInterface, ISupportsInterface} from \\\"../SupportsInterface.sol\\\";\\n\\nabstract contract CcipResponseVerifier is ICcipResponseVerifier, SupportsInterface {\\n    /*\\n     *   --------------------------------------------------\\n     *    EVENTS\\n     *   --------------------------------------------------\\n     */\\n\\n    event GraphQlUrlChanged(string newGraphQlUrl);\\n    event OwnerChanged(address newOwner);\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    State Variables\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice The owner of the contract\\n     * The owner of the contract can set the graphQlUrl and determine a new owner\\n     */\\n    address public owner;\\n\\n    string public graphqlUrl;\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Modifier\\n     *   --------------------------------------------------\\n     */\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the GraphQL endpoint URL for the contract\\n     * @dev This function can only be called by the current owner.\\n     * @param _graphqlUrl The new GraphQL endpoint URL to be set\\n     */\\n    function setGraphUrl(string memory _graphqlUrl) external onlyOwner {\\n        graphqlUrl = _graphqlUrl;\\n        emit GraphQlUrlChanged(_graphqlUrl);\\n    }\\n\\n    /**\\n     * @notice Set the new owner of the contract\\n     * @dev This function can only be called by the current owner.\\n     * @param _owner The address of the new owner\\n     */\\n    function setOwner(address _owner) external onlyOwner {\\n        owner = _owner;\\n        emit OwnerChanged(_owner);\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Constructor\\n     *   --------------------------------------------------\\n     */\\n\\n    constructor(address _owner, string memory _graphqlUrl) {\\n        owner = _owner;\\n        graphqlUrl = _graphqlUrl;\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    External functions\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice Check if the contract supports the given interface\\n     * @dev This function checks if the contract supports the provided interface by comparing the `interfaceID` with the supported interface IDs.\\n     * @param interfaceID The interface ID to check for support\\n     * @return true if the contract supports the interface, false otherwise\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public pure override(SupportsInterface, ISupportsInterface) returns (bool) {\\n        /*\\n         * Supports both ICcipResponseVerifier and ISupportsInterfacef\\n         */\\n        return interfaceID == type(ICcipResponseVerifier).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @notice To support other to be resolved than just bytes it is possible to override this function. In that case the function selector of the overridden function should be returned. The default implementation returns the function selector of the `resolveWithProof` function.\\n     * @return The function selector of the `resolveWithProof` function\\n     */\\n    function onResolveWithProof(bytes calldata, bytes calldata) public pure virtual override returns (bytes4) {\\n        return this.resolveWithProof.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x9f36bf96ed30ed29aa1921e46c2a68b827c0c402046c7336d667bbaab5e43146\",\"license\":\"MIT\"},\"contracts/verifier/ICcipResponseVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {ISupportsInterface} from \\\"../SupportsInterface.sol\\\";\\n\\ninterface ICcipResponseVerifier is ISupportsInterface {\\n    function resolveWithProof(bytes calldata response, bytes calldata extraData) external view returns (bytes memory);\\n\\n    function onResolveWithProof(bytes calldata name, bytes calldata data) external pure returns (bytes4);\\n\\n    function metadata(\\n        bytes calldata name\\n    ) external view returns (string memory, uint256, string memory, uint8, bytes memory, bytes memory);\\n}\\n\",\"keccak256\":\"0x74f5c5afb0097da674c00b833b504acb055c08ed82446909634dd0be04c3e9fb\",\"license\":\"MIT\"},\"contracts/verifier/optimism-bedrock/BedrockCcipVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {CcipResponseVerifier} from \\\"../CcipResponseVerifier.sol\\\";\\nimport {IBedrockProofVerifier} from \\\"./IBedrockProofVerifier.sol\\\";\\nimport {convertEVMChainIdToCoinType} from \\\"../../coinType/Ensip11CoinType.sol\\\";\\n\\n/**\\n * @notice A type specific handler for verifying the validity of data returned by\\n * a gateway that pulls data from Optimism Bedrock\\n */ \\ncontract BedrockCcipVerifier is CcipResponseVerifier {\\n    IBedrockProofVerifier public immutable bedrockProofVerifier;\\n    address public immutable target;\\n\\n    constructor(\\n        address owner,\\n        string memory graphQlUrl,\\n        IBedrockProofVerifier _bedrockProofVerifier,\\n        address _target\\n    ) CcipResponseVerifier(owner, graphQlUrl) {\\n        bedrockProofVerifier = _bedrockProofVerifier;\\n        target = _target;\\n    }\\n\\n    /**\\n     * @notice Resolve a response with a proof\\n     * @dev This function allows resolving a response along with a proof provided by IBedrockProofVerifier.\\n     * @param response The response data along with the associated proof\\n     * @param extraData The original data passed to the request\\n     * @return The resolved response data encoded as bytes\\n     */\\n    function resolveWithProof(bytes calldata response, bytes calldata extraData) public view virtual override returns (bytes memory) {\\n        /*\\n         * @dev Decode the response and proof from the response bytes\\n         */\\n        (bytes memory responseEncoded, IBedrockProofVerifier.BedrockStateProof memory proof) = abi.decode(\\n            response,\\n            (bytes, IBedrockProofVerifier.BedrockStateProof)\\n        );\\n        /*\\n         * Revert if the proof target does not match the resolver. This is to prevent a malicious resolver from using a * proof intended for another address.\\n         */\\n        require(proof.target == target, \\\"proof target does not match resolver\\\");\\n        /*\\n         * bedrockProofVerifier.getProofValue(proof) always returns the packed result.\\n         * However, libraries like ethers.js expect the result to be encoded in bytes.\\n         * Hence, the gateway needs to encode the result before returning it to the client.\\n         * To ensure responseEncoded matches the value returned by bedrockProofVerifier.getProofValue(proof),\\n         * we need to check the layout of the proof and encode the result accordingly, so we can compare the two values * using the keccak256 hash.\\n         */\\n\\n        require(\\n            proof.layout == 0\\n                ? keccak256(bedrockProofVerifier.getProofValue(proof)) == keccak256(responseEncoded)\\n                : keccak256(abi.encode(bedrockProofVerifier.getProofValue(proof))) == keccak256(responseEncoded),\\n            \\\"proof does not match response\\\"\\n        );\\n\\n        return responseEncoded;\\n    }\\n\\n    /**\\n     * @notice Get metadata about the CCIP Resolver\\n     * @dev This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @return name The name of the resolver (\\\"CCIP RESOLVER\\\")\\n     * @return coinType Resolvers coin type (60 for Ethereum)\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     * @return storageType Storage Type (0 for EVM)\\n     * @return storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\\n     * @return context the owner of the name. Always returns address(0) since the owner is determined by the erc3668Resolver contract.\\n     */\\n    function metadata(\\n        bytes calldata\\n    ) external view override returns (string memory, uint256, string memory, uint8, bytes memory, bytes memory) {\\n        return (\\n            \\\"Optimism Goerli\\\", // the name of the resolver\\n            convertEVMChainIdToCoinType(420), // coinType according to ENSIP-11 for chain id 420\\n            this.graphqlUrl(), // the GraphQL Url\\n            uint8(0), // storage Type 0 => EVM\\n            abi.encodePacked(address(target)), // storage location => resolver address\\n            abi.encodePacked(address(0)) // context => l2 resolver address\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb90a5e170e6635e003401023a07cc3bcb32bb2991d2146449e0fda82324a89f4\",\"license\":\"MIT\"},\"contracts/verifier/optimism-bedrock/IBedrockProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {Types} from \\\"@eth-optimism/contracts-bedrock/contracts/libraries/Types.sol\\\";\\n\\ninterface IBedrockProofVerifier {\\n    struct BedrockStateProof {\\n        uint8 layout;\\n        // the address of the contract we are trying to prove\\n        address target;\\n        // the length of the result\\n        uint256 length;\\n        // the state root of the account we are trying to prove\\n        bytes32 storageHash;\\n        // the accountProof RLP-Encoded\\n        bytes stateTrieWitness;\\n        // the output index the proof refers to\\n        uint256 l2OutputIndex;\\n        // the bedrock output RootProof struct\\n        Types.OutputRootProof outputRootProof;\\n        // the storage proofs for each slot included in the proof\\n        StorageProof[] storageProofs;\\n    }\\n    struct StorageProof {\\n        // the slot address\\n        bytes32 key;\\n        // the storageProof RLP-Encoded\\n        bytes storageTrieWitness;\\n    }\\n\\n    /// @notice returns the value of one or more storage slots given the provided proof is correct\\n    /// @param proof BedrockStateProof\\n    /// @return the value of all included slots concatenated\\n    function getProofValue(BedrockStateProof memory proof) external view returns (bytes memory);\\n}\\n\\ninterface IL2OutputOracle {\\n    function getL2Output(uint256 _l2OutputIndex) external view returns (Types.OutputProposal memory);\\n}\\n\",\"keccak256\":\"0x31616f5bfa4b6d9c3b4144a3a3b9bfd9236c4a750cb5cd2809750923a2aa90ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523462000063575b620000236200001962000269565b9291909162000292565b6040516115ab6200053082396080518181816102f6015281816112470152611317015260a051818181610814015281816111f2015261148c01526115ab90f35b6200006c600080fd5b6200000b565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000b057604052565b620000ba62000077565b604052565b90620000d6620000ce60405190565b92836200008e565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036200007257565b90505190620000d682620000e7565b6020906200012a906001600160401b0381116200012e57601f01601f191690565b0190565b6200013862000077565b601f01601f191690565b60005b838110620001565750506000910152565b818101518382015260200162000145565b929190620000d691620001846200017e8362000109565b620000bf565b94828652602086019183820111156200014257620001a0600080fd5b62000142565b90620000e49181601f82011215620001c5575b60208151910162000167565b620001ce600080fd5b620001b9565b6001600160a01b038116620000f2565b90505190620000d682620001d4565b6080818303126200025a575b6200020b8282620000fa565b92620000e46200023184602085015160018060401b0381116200024b575b8501620001a6565b93620002418160408601620001e4565b93606001620000fa565b62000254600080fd5b62000229565b62000263600080fd5b620001ff565b6200028c62001adb803803806200028081620000bf565b928339810190620001f3565b90919293565b906200029e9162000515565b60805260a052565b906001600160a01b03905b9181191691161790565b620000e490620000d8906001600160a01b031682565b620000e490620002bb565b620000e490620002d1565b90620002fb620000e46200030392620002dc565b8254620002a6565b9055565b50634e487b7160e01b600052602260045260246000fd5b906001600283049216801562000345575b60208310146200033b57565b620000d662000307565b91607f16916200032f565b9160001960089290920291821b911b620002b1565b620000e4620000e4620000e49290565b91906200038a620000e4620003039362000365565b90835462000350565b620000d69160009162000375565b818110620003ad575050565b80620003bd600060019362000393565b01620003a1565b9190601f8111620003d457505050565b620003e8620000d693600052602060002090565b906020601f8401819004830193106200040c575b6020601f909101040190620003a1565b9091508190620003fc565b9062000421815190565b906001600160401b038211620004f9575b6200044a826200044385546200031e565b85620003c4565b602090601f83116001146200048957620003039291600091836200047d575b5050600019600883021c1916906002021790565b01519050388062000469565b601f198316916200049f85600052602060002090565b9260005b818110620004e057509160029391856001969410620004c6575b50505002019055565b01516000196008601f8516021c19169055388080620004bd565b91936020600181928787015181550195019201620004a3565b6200050362000077565b62000432565b90620000d69162000417565b9062000527620000d6926000620002e7565b60016200050956fe60806040526004361015610018575b610016600080fd5b005b60003560e01c806301ffc9a7146100e0578063077b4e3c146100d757806309f55cac146100ce57806313af4035146100c55780634062b43f146100bc5780634196c5b7146100b35780638a596ebe146100aa5780638da5cb5b146100a1578063d4b83992146100985763f4d4d2f80361000e57610093610845565b61000e565b506100936107fd565b506100936107c6565b50610093610746565b50610093610683565b50610093610564565b5061009361035b565b506100936102db565b5061009361023c565b50610093610138565b600080fd5b6001600160e01b031981165b036100e957565b9050359061010e826100ee565b565b906101249160208183031261012757610101565b90565b61012f600080fd5b610101565b9052565b503461016b575b610167610155610150366004610110565b610b5f565b60405191829182901515815260200190565b0390f35b610173600080fd5b61013f565b909182601f830112156101bb575b60208235926001600160401b0384116101ae575b0192828401116101a657565b61010e600080fd5b6101b6600080fd5b61019a565b6101c3600080fd5b610186565b9160408383031261022f575b6102116101f38385356001600160401b038111610222575b8601610178565b9390946020810135906001600160401b038211610215575b01610178565b9091565b61021d600080fd5b61020b565b61022a600080fd5b6101ec565b610237600080fd5b6101d4565b5034610278575b61016761025d6102543660046101c8565b92919091610bbe565b604051918291826001600160e01b0319909116815260200190565b610280600080fd5b610243565b60009103126101a657565b610124906102a4906001600160a01b031682565b6001600160a01b031690565b61012490610290565b610124906102b0565b610134906102b9565b60208101929161010e91906102c2565b503461031b575b6102ed366004610285565b604051806101677f0000000000000000000000000000000000000000000000000000000000000000826102cb565b610323600080fd5b6102e2565b6100fa816102a4565b9050359061010e82610328565b90610124916020818303121561033157610356600080fd5b610331565b503461037a575b61037561037036600461033e565b610b56565b604051005b610382600080fd5b610362565b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156103d8575b60208310146103d057565b61010e61039e565b91607f16916103c5565b805460009392916103ff6103f5836103b5565b8085529360200190565b9160018116908115610451575060011461041857505050565b61042b9192939450600052602060002090565b916000925b81841061043d5750500190565b805484840152602090930192600101610430565b92949550505060ff1916825215156020020190565b90610124916103e2565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104b257604052565b6104ba61047a565b604052565b9061010e6104d9926104d060405190565b93848092610466565b0383610491565b61012491156104bf576104f1610387565b6104bf565b610124600060016104e0565b60005b8381106105155750506000910152565b8181015183820152602001610505565b61054661047060209361054f9361053a815190565b80835293849260200190565b95869101610502565b0190565b602080825261012492910190610525565b503461058e575b610576366004610285565b6101676105816104f6565b6040515b91829182610553565b610596600080fd5b61056b565b9061010e6105a860405190565b9283610491565b61054f6020916001600160401b0381116105cd57601f01601f191690565b61047061047a565b90826000939282370152565b92919061010e916105f96105f4836105af565b61059b565b94828652602086019183820111156105d557610613600080fd5b6105d5565b906101249181601f82011215610634575b6020813591016105e1565b61063c600080fd5b610629565b9061012491602081830312610676575b8035906001600160401b038211610669575b01610618565b610671600080fd5b610663565b61067e600080fd5b610651565b503461069d575b610375610698366004610641565b610ad1565b6106a5600080fd5b61068a565b90610211916020818303126106d1575b8035906001600160401b0382116102155701610178565b6106d9600080fd5b6106ba565b949061071f6101249795936107389561071261070a61072b9560c08c01908c6000818403910152610525565b9260208b0152565b88820360408a0152610525565b60ff9093166060870152565b8482036080860152610525565b9160a0818403910152610525565b503461077d575b61016761076461075e3660046106aa565b9061141c565b9261077496949692919260405190565b968796876106de565b610785600080fd5b61074d565b610124916008021c6102a4565b90610124915461078a565b610124600080610797565b610134906102a4565b60208101929161010e91906107ad565b50346107f0575b6107d8366004610285565b6101676107e36107a2565b6040515b918291826107b6565b6107f8600080fd5b6107cd565b5034610838575b61080f366004610285565b6101677f00000000000000000000000000000000000000000000000000000000000000006107e3565b610840600080fd5b610804565b5034610866575b61016761058161085d3660046101c8565b929190916111c5565b61086e600080fd5b61084c565b610124906102a4565b6101249054610873565b1561088d57565b60405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606490fd5b61010e906108e8336108e26108dc6108d7600061087c565b6102a4565b916102a4565b14610886565b610a93565b9160001960089290920291821b911b5b9181191691161790565b6101246101246101249290565b919061092561012461092d93610907565b9083546108ed565b9055565b61010e91600091610914565b818110610948575050565b806109566000600193610931565b0161093d565b9190601f811161096b57505050565b61097d61010e93600052602060002090565b906020601f84018190048301931061099f575b6020601f90910104019061093d565b9091508190610990565b906109b2815190565b906001600160401b038211610a7c575b6109d6826109d085546103b5565b8561095c565b602090601f8311600114610a115761092d929160009183610a06575b5050600019600883021c1916906002021790565b0151905038806109f2565b601f19831691610a2685600052602060002090565b9260005b818110610a6457509160029391856001969410610a4b575b50505002019055565b01516000196008601f8516021c19169055388080610a42565b91936020600181928787015181550195019201610a2a565b610a8461047a565b6109c2565b9061010e916109a9565b610a9e816001610a89565b610acc7f42515f8c831da70a1bc6849e167ec86a5622ae3cf72262fe05ff503e5432d7b79161058560405190565b0390a1565b61010e906108bf565b61010e90610af2336108e26108dc6108d7600061087c565b610b1d565b906001600160a01b03906108fd565b90610b1661012461092d926102b9565b8254610af7565b610b28816000610b06565b610acc7fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36916107e760405190565b61010e90610ada565b633cfb793d60e11b6001600160e01b0319821614908115610b7e575090565b6001600160e01b0319166301ffc9a760e01b149050610124565b610bb1610bab6101249263ffffffff1690565b60e01b90565b6001600160e01b03191690565b50505050610bca600090565b5061012463f4d4d2f8610b98565b60ff81166100fa565b9050359061010e82610bd8565b806100fa565b9050359061010e82610bee565b919091608081840312610c61575b610c5b610c1c608061059b565b936000610c298285610bf4565b908601526020610c3b82828601610bf4565b908601526040610c4d82828601610bf4565b908601526060809301610bf4565b90830152565b610c69600080fd5b610c0f565b602080916001600160401b038111610c8557020190565b610c8d61047a565b020190565b9190610cd890604084820312610cdf575b610cad604061059b565b936000610cba8383610bf4565b908601526020810135906001600160401b0382116106695701610618565b6020830152565b610ce7600080fd5b610ca3565b90929192610cfc6105f482610c6e565b9381855260208086019202830192818411610d5b575b80925b848410610d23575050505050565b60208091610d438587356001600160401b038111610d4e575b8601610c92565b815201930192610d15565b610d56600080fd5b610d3c565b610d63600080fd5b610d12565b906101249181601f82011215610d84575b602081359101610cec565b610d8c600080fd5b610d79565b9190610e599061016084820312610e7a575b610dae61010061059b565b936000610dbb8383610be1565b908601526020610dcd83828401610331565b908601526040610ddf83828401610bf4565b908601526060610df183828401610bf4565b90860152610e148260808301356001600160401b038111610e6d575b8301610618565b608086015260a0610e2783828401610bf4565b9086015260c0610e3983828401610c01565b90860152610140810135906001600160401b038211610e60575b01610d68565b60e0830152565b610e68600080fd5b610e53565b610e75600080fd5b610e0d565b610e82600080fd5b610da3565b919061012490604084820312610eea575b610eb48185356001600160401b038111610edd575b8601610618565b936020810135906001600160401b038211610ed0575b01610d91565b610ed8600080fd5b610eca565b610ee5600080fd5b610ead565b610ef2600080fd5b610e98565b61012490516102a4565b15610f0857565b60405162461bcd60e51b8152602060048201526024808201527f70726f6f662074617267657420646f6573206e6f74206d61746368207265736f604482015263363b32b960e11b6064820152608490fd5b610f666101246101249290565b60ff1690565b92919061010e91610f7f6105f4836105af565b948286526020860191838201111561050257610f99600080fd5b610502565b906101249181601f82011215610fba575b602081519101610f6c565b610fc2600080fd5b610faf565b9061012491602081830312610ffc575b8051906001600160401b038211610fef575b01610f9e565b610ff7600080fd5b610fe9565b611004600080fd5b610fd7565b8051825261010e9190606090819061102660208201516020860152565b61103560408201516040860152565b0151910152565b8051825261012491604081019160200151906020818403910152610525565b906101249161103c565b9061107b611071835190565b8083529160200190565b908161108d6020830284019460200190565b926000915b8383106110a157505050505090565b909192939460206110c46110bd8385600195038752895161105b565b9760200190565b9301930191939290611092565b805160ff1682526101249160e061112861016083016110f8602086015160208601906107ad565b61110760408601516040860152565b61111660608601516060860152565b60808501518482036080860152610525565b9261113860a082015160a0850152565b61114a60c082015160c0850190611009565b015190610140818403910152611065565b6020808252610124929101906110d1565b506040513d6000823e3d90fd5b1561118057565b60405162461bcd60e51b815260206004820152601d60248201527f70726f6f6620646f6573206e6f74206d6174636820726573706f6e73650000006044820152606490fd5b61012493506111d8925090810190610e87565b61121c6111ea60208395949501610ef7565b6112166108dc7f00000000000000000000000000000000000000000000000000000000000000006102a4565b14610f01565b805160ff169060009161123861123184610f59565b9160ff1690565b0361130d57816112949161126b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b611289638f46c50d61127c60405190565b9586948593849360e01b90565b83526004830161115b565b03915afa918215611300575b6000926112dd575b50506112bc6112b5825190565b9160200190565b206112d76112d36112cb855190565b602086012090565b9190565b14611179565b6112f992503d8091833e6112f18183610491565b810190610fc7565b38806112a8565b61130861116c565b6112a0565b9061133b9161126b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b03915afa90811561139c575b600091611383575b5061137861135c60405190565b809261136c602083019182610553565b90810382520382610491565b6112bc6112b5825190565b611396913d8091833e6112f18183610491565b3861134f565b6113a461116c565b611347565b6113b5610134916102a4565b60601b90565b61054f816014936113a9565b6102a46101246101249290565b610124906113c7565b906113ea6105f4836105af565b918252565b6113f9600f6113dd565b6e4f7074696d69736d20476f65726c6960881b602082015290565b6101246113ef565b5050611426606090565b5061146161143d6114386101a4610907565b611553565b916000611449306102b9565b634062b43f9061145860405190565b94859260e01b90565b825260049082905afa91821561152d575b600092611512575b50600061148681610f59565b916114d97f0000000000000000000000000000000000000000000000000000000000000000926114d46114b860405190565b80956114c86020830191826113bb565b90810382520385610491565b6113d4565b906115026114e660405190565b80936114f66020830191826113bb565b90810382520383610491565b61150a611414565b959493929190565b61152691923d8091833e6112f18183610491565b903861147a565b61153561116c565b611472565b6101249061154e6112d36101249460ff1690565b901c90565b610124906115646380000000610907565b1761156f6000610f59565b9061153a56fea26469706673582212201473762e41d5e2ef48de23fcccb3cad6b9a50034c0dfc5055dc90136d7ed099164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610018575b610016600080fd5b005b60003560e01c806301ffc9a7146100e0578063077b4e3c146100d757806309f55cac146100ce57806313af4035146100c55780634062b43f146100bc5780634196c5b7146100b35780638a596ebe146100aa5780638da5cb5b146100a1578063d4b83992146100985763f4d4d2f80361000e57610093610845565b61000e565b506100936107fd565b506100936107c6565b50610093610746565b50610093610683565b50610093610564565b5061009361035b565b506100936102db565b5061009361023c565b50610093610138565b600080fd5b6001600160e01b031981165b036100e957565b9050359061010e826100ee565b565b906101249160208183031261012757610101565b90565b61012f600080fd5b610101565b9052565b503461016b575b610167610155610150366004610110565b610b5f565b60405191829182901515815260200190565b0390f35b610173600080fd5b61013f565b909182601f830112156101bb575b60208235926001600160401b0384116101ae575b0192828401116101a657565b61010e600080fd5b6101b6600080fd5b61019a565b6101c3600080fd5b610186565b9160408383031261022f575b6102116101f38385356001600160401b038111610222575b8601610178565b9390946020810135906001600160401b038211610215575b01610178565b9091565b61021d600080fd5b61020b565b61022a600080fd5b6101ec565b610237600080fd5b6101d4565b5034610278575b61016761025d6102543660046101c8565b92919091610bbe565b604051918291826001600160e01b0319909116815260200190565b610280600080fd5b610243565b60009103126101a657565b610124906102a4906001600160a01b031682565b6001600160a01b031690565b61012490610290565b610124906102b0565b610134906102b9565b60208101929161010e91906102c2565b503461031b575b6102ed366004610285565b604051806101677f0000000000000000000000000000000000000000000000000000000000000000826102cb565b610323600080fd5b6102e2565b6100fa816102a4565b9050359061010e82610328565b90610124916020818303121561033157610356600080fd5b610331565b503461037a575b61037561037036600461033e565b610b56565b604051005b610382600080fd5b610362565b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b90600160028304921680156103d8575b60208310146103d057565b61010e61039e565b91607f16916103c5565b805460009392916103ff6103f5836103b5565b8085529360200190565b9160018116908115610451575060011461041857505050565b61042b9192939450600052602060002090565b916000925b81841061043d5750500190565b805484840152602090930192600101610430565b92949550505060ff1916825215156020020190565b90610124916103e2565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104b257604052565b6104ba61047a565b604052565b9061010e6104d9926104d060405190565b93848092610466565b0383610491565b61012491156104bf576104f1610387565b6104bf565b610124600060016104e0565b60005b8381106105155750506000910152565b8181015183820152602001610505565b61054661047060209361054f9361053a815190565b80835293849260200190565b95869101610502565b0190565b602080825261012492910190610525565b503461058e575b610576366004610285565b6101676105816104f6565b6040515b91829182610553565b610596600080fd5b61056b565b9061010e6105a860405190565b9283610491565b61054f6020916001600160401b0381116105cd57601f01601f191690565b61047061047a565b90826000939282370152565b92919061010e916105f96105f4836105af565b61059b565b94828652602086019183820111156105d557610613600080fd5b6105d5565b906101249181601f82011215610634575b6020813591016105e1565b61063c600080fd5b610629565b9061012491602081830312610676575b8035906001600160401b038211610669575b01610618565b610671600080fd5b610663565b61067e600080fd5b610651565b503461069d575b610375610698366004610641565b610ad1565b6106a5600080fd5b61068a565b90610211916020818303126106d1575b8035906001600160401b0382116102155701610178565b6106d9600080fd5b6106ba565b949061071f6101249795936107389561071261070a61072b9560c08c01908c6000818403910152610525565b9260208b0152565b88820360408a0152610525565b60ff9093166060870152565b8482036080860152610525565b9160a0818403910152610525565b503461077d575b61016761076461075e3660046106aa565b9061141c565b9261077496949692919260405190565b968796876106de565b610785600080fd5b61074d565b610124916008021c6102a4565b90610124915461078a565b610124600080610797565b610134906102a4565b60208101929161010e91906107ad565b50346107f0575b6107d8366004610285565b6101676107e36107a2565b6040515b918291826107b6565b6107f8600080fd5b6107cd565b5034610838575b61080f366004610285565b6101677f00000000000000000000000000000000000000000000000000000000000000006107e3565b610840600080fd5b610804565b5034610866575b61016761058161085d3660046101c8565b929190916111c5565b61086e600080fd5b61084c565b610124906102a4565b6101249054610873565b1561088d57565b60405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606490fd5b61010e906108e8336108e26108dc6108d7600061087c565b6102a4565b916102a4565b14610886565b610a93565b9160001960089290920291821b911b5b9181191691161790565b6101246101246101249290565b919061092561012461092d93610907565b9083546108ed565b9055565b61010e91600091610914565b818110610948575050565b806109566000600193610931565b0161093d565b9190601f811161096b57505050565b61097d61010e93600052602060002090565b906020601f84018190048301931061099f575b6020601f90910104019061093d565b9091508190610990565b906109b2815190565b906001600160401b038211610a7c575b6109d6826109d085546103b5565b8561095c565b602090601f8311600114610a115761092d929160009183610a06575b5050600019600883021c1916906002021790565b0151905038806109f2565b601f19831691610a2685600052602060002090565b9260005b818110610a6457509160029391856001969410610a4b575b50505002019055565b01516000196008601f8516021c19169055388080610a42565b91936020600181928787015181550195019201610a2a565b610a8461047a565b6109c2565b9061010e916109a9565b610a9e816001610a89565b610acc7f42515f8c831da70a1bc6849e167ec86a5622ae3cf72262fe05ff503e5432d7b79161058560405190565b0390a1565b61010e906108bf565b61010e90610af2336108e26108dc6108d7600061087c565b610b1d565b906001600160a01b03906108fd565b90610b1661012461092d926102b9565b8254610af7565b610b28816000610b06565b610acc7fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36916107e760405190565b61010e90610ada565b633cfb793d60e11b6001600160e01b0319821614908115610b7e575090565b6001600160e01b0319166301ffc9a760e01b149050610124565b610bb1610bab6101249263ffffffff1690565b60e01b90565b6001600160e01b03191690565b50505050610bca600090565b5061012463f4d4d2f8610b98565b60ff81166100fa565b9050359061010e82610bd8565b806100fa565b9050359061010e82610bee565b919091608081840312610c61575b610c5b610c1c608061059b565b936000610c298285610bf4565b908601526020610c3b82828601610bf4565b908601526040610c4d82828601610bf4565b908601526060809301610bf4565b90830152565b610c69600080fd5b610c0f565b602080916001600160401b038111610c8557020190565b610c8d61047a565b020190565b9190610cd890604084820312610cdf575b610cad604061059b565b936000610cba8383610bf4565b908601526020810135906001600160401b0382116106695701610618565b6020830152565b610ce7600080fd5b610ca3565b90929192610cfc6105f482610c6e565b9381855260208086019202830192818411610d5b575b80925b848410610d23575050505050565b60208091610d438587356001600160401b038111610d4e575b8601610c92565b815201930192610d15565b610d56600080fd5b610d3c565b610d63600080fd5b610d12565b906101249181601f82011215610d84575b602081359101610cec565b610d8c600080fd5b610d79565b9190610e599061016084820312610e7a575b610dae61010061059b565b936000610dbb8383610be1565b908601526020610dcd83828401610331565b908601526040610ddf83828401610bf4565b908601526060610df183828401610bf4565b90860152610e148260808301356001600160401b038111610e6d575b8301610618565b608086015260a0610e2783828401610bf4565b9086015260c0610e3983828401610c01565b90860152610140810135906001600160401b038211610e60575b01610d68565b60e0830152565b610e68600080fd5b610e53565b610e75600080fd5b610e0d565b610e82600080fd5b610da3565b919061012490604084820312610eea575b610eb48185356001600160401b038111610edd575b8601610618565b936020810135906001600160401b038211610ed0575b01610d91565b610ed8600080fd5b610eca565b610ee5600080fd5b610ead565b610ef2600080fd5b610e98565b61012490516102a4565b15610f0857565b60405162461bcd60e51b8152602060048201526024808201527f70726f6f662074617267657420646f6573206e6f74206d61746368207265736f604482015263363b32b960e11b6064820152608490fd5b610f666101246101249290565b60ff1690565b92919061010e91610f7f6105f4836105af565b948286526020860191838201111561050257610f99600080fd5b610502565b906101249181601f82011215610fba575b602081519101610f6c565b610fc2600080fd5b610faf565b9061012491602081830312610ffc575b8051906001600160401b038211610fef575b01610f9e565b610ff7600080fd5b610fe9565b611004600080fd5b610fd7565b8051825261010e9190606090819061102660208201516020860152565b61103560408201516040860152565b0151910152565b8051825261012491604081019160200151906020818403910152610525565b906101249161103c565b9061107b611071835190565b8083529160200190565b908161108d6020830284019460200190565b926000915b8383106110a157505050505090565b909192939460206110c46110bd8385600195038752895161105b565b9760200190565b9301930191939290611092565b805160ff1682526101249160e061112861016083016110f8602086015160208601906107ad565b61110760408601516040860152565b61111660608601516060860152565b60808501518482036080860152610525565b9261113860a082015160a0850152565b61114a60c082015160c0850190611009565b015190610140818403910152611065565b6020808252610124929101906110d1565b506040513d6000823e3d90fd5b1561118057565b60405162461bcd60e51b815260206004820152601d60248201527f70726f6f6620646f6573206e6f74206d6174636820726573706f6e73650000006044820152606490fd5b61012493506111d8925090810190610e87565b61121c6111ea60208395949501610ef7565b6112166108dc7f00000000000000000000000000000000000000000000000000000000000000006102a4565b14610f01565b805160ff169060009161123861123184610f59565b9160ff1690565b0361130d57816112949161126b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b611289638f46c50d61127c60405190565b9586948593849360e01b90565b83526004830161115b565b03915afa918215611300575b6000926112dd575b50506112bc6112b5825190565b9160200190565b206112d76112d36112cb855190565b602086012090565b9190565b14611179565b6112f992503d8091833e6112f18183610491565b810190610fc7565b38806112a8565b61130861116c565b6112a0565b9061133b9161126b7f00000000000000000000000000000000000000000000000000000000000000006102b9565b03915afa90811561139c575b600091611383575b5061137861135c60405190565b809261136c602083019182610553565b90810382520382610491565b6112bc6112b5825190565b611396913d8091833e6112f18183610491565b3861134f565b6113a461116c565b611347565b6113b5610134916102a4565b60601b90565b61054f816014936113a9565b6102a46101246101249290565b610124906113c7565b906113ea6105f4836105af565b918252565b6113f9600f6113dd565b6e4f7074696d69736d20476f65726c6960881b602082015290565b6101246113ef565b5050611426606090565b5061146161143d6114386101a4610907565b611553565b916000611449306102b9565b634062b43f9061145860405190565b94859260e01b90565b825260049082905afa91821561152d575b600092611512575b50600061148681610f59565b916114d97f0000000000000000000000000000000000000000000000000000000000000000926114d46114b860405190565b80956114c86020830191826113bb565b90810382520385610491565b6113d4565b906115026114e660405190565b80936114f66020830191826113bb565b90810382520383610491565b61150a611414565b959493929190565b61152691923d8091833e6112f18183610491565b903861147a565b61153561116c565b611472565b6101249061154e6112d36101249460ff1690565b901c90565b610124906115646380000000610907565b1761156f6000610f59565b9061153a56fea26469706673582212201473762e41d5e2ef48de23fcccb3cad6b9a50034c0dfc5055dc90136d7ed099164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "metadata(bytes)": {
        "details": "This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.",
        "returns": {
          "_0": "name The name of the resolver (\"CCIP RESOLVER\")",
          "_1": "coinType Resolvers coin type (60 for Ethereum)",
          "_2": "graphqlUrl The GraphQL URL used by the resolver",
          "_3": "storageType Storage Type (0 for EVM)",
          "_4": "storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.",
          "_5": "context the owner of the name. Always returns address(0) since the owner is determined by the erc3668Resolver contract."
        }
      },
      "onResolveWithProof(bytes,bytes)": {
        "returns": {
          "_0": "The function selector of the `resolveWithProof` function"
        }
      },
      "resolveWithProof(bytes,bytes)": {
        "details": "This function allows resolving a response along with a proof provided by IBedrockProofVerifier.",
        "params": {
          "extraData": "The original data passed to the request",
          "response": "The response data along with the associated proof"
        },
        "returns": {
          "_0": "The resolved response data encoded as bytes"
        }
      },
      "setGraphUrl(string)": {
        "details": "This function can only be called by the current owner.",
        "params": {
          "_graphqlUrl": "The new GraphQL endpoint URL to be set"
        }
      },
      "setOwner(address)": {
        "details": "This function can only be called by the current owner.",
        "params": {
          "_owner": "The address of the new owner"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "This function checks if the contract supports the provided interface by comparing the `interfaceID` with the supported interface IDs.",
        "params": {
          "interfaceID": "The interface ID to check for support"
        },
        "returns": {
          "_0": "true if the contract supports the interface, false otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metadata(bytes)": {
        "notice": "Get metadata about the CCIP Resolver"
      },
      "onResolveWithProof(bytes,bytes)": {
        "notice": "To support other to be resolved than just bytes it is possible to override this function. In that case the function selector of the overridden function should be returned. The default implementation returns the function selector of the `resolveWithProof` function."
      },
      "owner()": {
        "notice": "The owner of the contract The owner of the contract can set the graphQlUrl and determine a new owner"
      },
      "resolveWithProof(bytes,bytes)": {
        "notice": "Resolve a response with a proof"
      },
      "setGraphUrl(string)": {
        "notice": "Set the GraphQL endpoint URL for the contract"
      },
      "setOwner(address)": {
        "notice": "Set the new owner of the contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports the given interface"
      }
    },
    "notice": "A type specific handler for verifying the validity of data returned by a gateway that pulls data from Optimism Bedrock",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7663,
        "contract": "contracts/verifier/optimism-bedrock/BedrockCcipVerifier.sol:BedrockCcipVerifier",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7665,
        "contract": "contracts/verifier/optimism-bedrock/BedrockCcipVerifier.sol:BedrockCcipVerifier",
        "label": "graphqlUrl",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}