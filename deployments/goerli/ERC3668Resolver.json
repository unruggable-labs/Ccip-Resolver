{
  "address": "0x2389Cda3D5960fA4ce08162E2436AFA68Ef5BE85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "_ensRegistry",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultVerifier",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_gatewayUrls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifierAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "gatewayUrls",
          "type": "string[]"
        }
      ],
      "name": "VerifierAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ccipVerifier",
      "outputs": [
        {
          "internalType": "contract ICcipResponseVerifier",
          "name": "verifierAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "getVerifierOfDomain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string[]",
              "name": "gatewayUrls",
              "type": "string[]"
            },
            {
              "internalType": "contract ICcipResponseVerifier",
              "name": "verifierAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ERC3668Resolver.CcipVerifier",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveWithProof",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifierAddress",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        }
      ],
      "name": "setVerifierForDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4237c627a4a226d071a5cbe80edc1a754c429f95ceed8f4f04cde3606735ad96",
  "receipt": {
    "to": null,
    "from": "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "contractAddress": "0x2389Cda3D5960fA4ce08162E2436AFA68Ef5BE85",
    "transactionIndex": 47,
    "gasUsed": "1998146",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000001000000000000000000000000000000000000004000000",
    "blockHash": "0xebc501c3a95bb61a6efd57771f0707d7e4c7d61c0bace9b89fff4893d0abe7fc",
    "transactionHash": "0x4237c627a4a226d071a5cbe80edc1a754c429f95ceed8f4f04cde3606735ad96",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 9556292,
        "transactionHash": "0x4237c627a4a226d071a5cbe80edc1a754c429f95ceed8f4f04cde3606735ad96",
        "address": "0x2389Cda3D5960fA4ce08162E2436AFA68Ef5BE85",
        "topics": [
          "0x83c85f7f7423b99a5b5948f29e31a5d7087ef88402d6c71c09a63ee4c0a3af5d",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000a51f64340cf6a78bf68f222b643927dc9c999ca6000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001d68747470733a2f2f756e7275676761626c65676174657761792e636f6d000000",
        "logIndex": 111,
        "blockHash": "0xebc501c3a95bb61a6efd57771f0707d7e4c7d61c0bace9b89fff4893d0abe7fc"
      }
    ],
    "blockNumber": 9556292,
    "cumulativeGasUsed": "17144412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x114D4603199df73e7D157787f8778E21fCd13066",
    "0xA51F64340CF6A78bF68f222B643927Dc9c999Ca6",
    [
      "https://unruggablegateway.com"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "0e503b554fdaf69e19489f9527b6a254",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultVerifier\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_gatewayUrls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gatewayUrls\",\"type\":\"string[]\"}],\"name\":\"VerifierAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ccipVerifier\",\"outputs\":[{\"internalType\":\"contract ICcipResponseVerifier\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"getVerifierOfDomain\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"gatewayUrls\",\"type\":\"string[]\"},{\"internalType\":\"contract ICcipResponseVerifier\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"internalType\":\"struct ERC3668Resolver.CcipVerifier\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveWithProof\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"}],\"name\":\"setVerifierForDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getVerifierOfDomain(bytes)\":{\"details\":\"This function allows retrieving the CCIP Verifier and its associated node for a given domain name. For subdomains, it will return the CCIP Verifier of the closest parent.\",\"params\":{\"name\":\"The domain name in bytes (dnsEncoded)\"},\"returns\":{\"_0\":\"_ccipVerifier The CCIP Verifier associated with the given domain name\",\"_1\":\"node The node associated with the given domain name\"}},\"metadata(bytes)\":{\"details\":\"This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\",\"params\":{\"name\":\"The domain name in format (dnsEncoded)\"},\"returns\":{\"_0\":\"name The name of the resolver (\\\"CCIP RESOLVER\\\")\",\"_1\":\"coinType Resolvers coin type (60 for Ethereum)\",\"_2\":\"graphqlUrl The GraphQL URL used by the resolver\",\"_3\":\"storageType Storage Type (0 for EVM)\",\"_4\":\"storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\",\"_5\":\"context can be l2 resolver contract address for evm chain but can be any l2 storage identifier for non-evm chain\"}},\"resolve(bytes,bytes)\":{\"params\":{\"data\":\"The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).\",\"name\":\"The DNS-encoded name to resolve.\"},\"returns\":{\"_0\":\"The return data, ABI encoded identically to the underlying function.\"}},\"resolveWithProof(bytes,bytes)\":{\"details\":\"Function to resolve a domain name with proof using an off-chain callback mechanism.\",\"params\":{\"extraData\":\"The actual calldata that was called on the gateway.\",\"response\":\"The response received from off-chain resolution.\"},\"returns\":{\"_0\":\"the result of the offchain lookup\"}},\"setVerifierForDomain(bytes32,address,string[])\":{\"params\":{\"node\":\"The domain node for which the CCIP Verifier is set.\",\"urls\":\"The gateway url that should handle the OffchainLookup.\",\"verifierAddress\":\"The address of the CcipResponseVerifier contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Implements the ERC-165 standard to check for interface support.\",\"params\":{\"interfaceID\":\"The interface identifier to check\"},\"returns\":{\"_0\":\"True if the contract supports the given interface, otherwise false\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getVerifierOfDomain(bytes)\":{\"notice\":\"Get the CCIP Verifier and node for a given domain name\"},\"metadata(bytes)\":{\"notice\":\"Get metadata about the CCIP Resolver\"},\"resolve(bytes,bytes)\":{\"notice\":\"Resolves arbitrary data for a particular name, as specified by ENSIP 10.\"},\"setVerifierForDomain(bytes32,address,string[])\":{\"notice\":\"Sets a Cross-chain Information Protocol (CCIP) Verifier for a specific domain node.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports a specific interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC3668Resolver.sol\":\"ERC3668Resolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x9ac51351ff72d73083aed62b7cdad4c07e9d1eb68401d7fd8457bdd828f2c6fe\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENSRegistry is ENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32 => Record) records;\\n    mapping(address => mapping(address => bool)) operators;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier authorised(bytes32 node) {\\n        address owner = records[node].owner;\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new ENS registry.\\n     */\\n    constructor() public {\\n        records[0x0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets the record for a node.\\n     * @param node The node to update.\\n     * @param owner The address of the new owner.\\n     * @param resolver The address of the resolver.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external virtual override {\\n        setOwner(node, owner);\\n        _setResolverAndTTL(node, resolver, ttl);\\n    }\\n\\n    /**\\n     * @dev Sets the record for a subnode.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     * @param resolver The address of the resolver.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external virtual override {\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\n        _setResolverAndTTL(subnode, resolver, ttl);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(\\n        bytes32 node,\\n        address owner\\n    ) public virtual override authorised(node) {\\n        _setOwner(node, owner);\\n        emit Transfer(node, owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) public virtual override authorised(node) returns (bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        _setOwner(subnode, owner);\\n        emit NewOwner(node, label, owner);\\n        return subnode;\\n    }\\n\\n    /**\\n     * @dev Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(\\n        bytes32 node,\\n        address resolver\\n    ) public virtual override authorised(node) {\\n        emit NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * @dev Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(\\n        bytes32 node,\\n        uint64 ttl\\n    ) public virtual override authorised(node) {\\n        emit NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n\\n    /**\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\n     * @param operator Address to add to the set of authorized operators.\\n     * @param approved True if the operator is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) external virtual override {\\n        operators[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns the address that owns the specified node.\\n     * @param node The specified node.\\n     * @return address of the owner.\\n     */\\n    function owner(\\n        bytes32 node\\n    ) public view virtual override returns (address) {\\n        address addr = records[node].owner;\\n        if (addr == address(this)) {\\n            return address(0x0);\\n        }\\n\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the resolver for the specified node.\\n     * @param node The specified node.\\n     * @return address of the resolver.\\n     */\\n    function resolver(\\n        bytes32 node\\n    ) public view virtual override returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * @dev Returns the TTL of a node, and any records associated with it.\\n     * @param node The specified node.\\n     * @return ttl of the node.\\n     */\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * @dev Returns whether a record has been imported to the registry.\\n     * @param node The specified node.\\n     * @return Bool if record exists\\n     */\\n    function recordExists(\\n        bytes32 node\\n    ) public view virtual override returns (bool) {\\n        return records[node].owner != address(0x0);\\n    }\\n\\n    /**\\n     * @dev Query if an address is an authorized operator for another address.\\n     * @param owner The address that owns the records.\\n     * @param operator The address that acts on behalf of the owner.\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view virtual override returns (bool) {\\n        return operators[owner][operator];\\n    }\\n\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\n        records[node].owner = owner;\\n    }\\n\\n    function _setResolverAndTTL(\\n        bytes32 node,\\n        address resolver,\\n        uint64 ttl\\n    ) internal {\\n        if (resolver != records[node].resolver) {\\n            records[node].resolver = resolver;\\n            emit NewResolver(node, resolver);\\n        }\\n\\n        if (ttl != records[node].ttl) {\\n            records[node].ttl = ttl;\\n            emit NewTTL(node, ttl);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7a7a64fb980e521c991415e416fd4106a42f892479805e1daa51ecb0e2e5198\"},\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external;\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd002578ddf6a3958d9a89960639a2b37d016fa13dc52c57f0fddf30ed150ad88\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7f4ecff0b23bd0b7510c79efa9ae338f7bcc043c5942e62bb05dc4f5f699e4fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC3668Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IExtendedResolver, IResolverService} from \\\"./IExtendedResolver.sol\\\";\\nimport {IMetadataResolver} from \\\"./IMetadataResolver.sol\\\";\\nimport {SupportsInterface} from \\\"./SupportsInterface.sol\\\";\\nimport {CcipResponseVerifier, ICcipResponseVerifier} from \\\"./verifier/CcipResponseVerifier.sol\\\";\\nimport {ENSRegistry} from \\\"@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol\\\";\\nimport {INameWrapper} from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport {BytesUtils} from \\\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\\\";\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/*\\n * Implements an ENS resolver that directs all queries to a CCIP read gateway.\\n * Callers must implement EIP 3668 and ENSIP 10.\\n */\\n\\ncontract ERC3668Resolver is IExtendedResolver, IMetadataResolver, SupportsInterface {\\n    using BytesUtils for bytes;\\n\\n    struct CcipVerifier {\\n        string[] gatewayUrls;\\n        ICcipResponseVerifier verifierAddress;\\n    }\\n    /**\\n     * The idnetifier to store the default verifier\\n     */\\n    bytes32 private constant DEFAULT_VERIFIER = bytes32(0);\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    EVENTS\\n     *   --------------------------------------------------\\n     */\\n\\n    event VerifierAdded(bytes32 indexed node, address verifierAddress, string[] gatewayUrls);\\n    /*\\n     *   --------------------------------------------------\\n     *    Errors\\n     *   --------------------------------------------------\\n     */\\n\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    State Variables\\n     *   --------------------------------------------------\\n     */\\n\\n    ENSRegistry public immutable ensRegistry;\\n    INameWrapper public immutable nameWrapper;\\n\\n    mapping(bytes32 => CcipVerifier) public ccipVerifier;\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Constructor\\n     *   --------------------------------------------------\\n     */\\n\\n    constructor(\\n        // The ENS registry\\n        ENSRegistry _ensRegistry,\\n        // The name wrapper\\n        INameWrapper _nameWrapper,\\n        //Address of the default CCIP Verifier\\n        address _defaultVerifier,\\n        string[] memory _gatewayUrls\\n    ) {\\n        ensRegistry = _ensRegistry;\\n        nameWrapper = _nameWrapper;\\n\\n        /**\\n         * If a default verifier is set, that verifier will be used by every child address that doesn't have a specific verifier set.\\n         *\\n         */\\n        if (_defaultVerifier != address(0)) {\\n            _setVerifierForDomain(DEFAULT_VERIFIER, _defaultVerifier, _gatewayUrls);\\n        }\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    External functions\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice Sets a Cross-chain Information Protocol (CCIP) Verifier for a specific domain node.\\n     * @param node The domain node for which the CCIP Verifier is set.\\n     * @param verifierAddress The address of the CcipResponseVerifier contract.\\n     * @param urls The gateway url that should handle the OffchainLookup.\\n     */\\n    function setVerifierForDomain(bytes32 node, address verifierAddress, string[] memory urls) external {\\n        /*\\n         * Only the node owner can set the verifier for a node. NameWrapper profiles are supported too.\\n         */\\n        require(node != bytes32(0), \\\"node is 0x0\\\");\\n        require(msg.sender == getNodeOwner(node), \\\"only node owner\\\");\\n        _setVerifierForDomain(node, verifierAddress, urls);\\n    }\\n\\n    /**\\n     * Resolves arbitrary data for a particular name, as specified by ENSIP 10.\\n     * @param name The DNS-encoded name to resolve.\\n     * @param data The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).\\n     * @return The return data, ABI encoded identically to the underlying function.\\n     */\\n    function resolve(bytes calldata name, bytes calldata data) external view override returns (bytes memory) {\\n        /*\\n         * Get the verifier for the given name.\\n         * reverts if no verifier was set in advance\\n         */\\n        (CcipVerifier memory _verifier, bytes32 node) = getVerifierOfDomain(name);\\n        /*\\n         * Retrieves the owner of the node. NameWrapper profiles are supported too. This will be the context of the request.\\n         */\\n        address nodeOwner = getNodeOwner(node);\\n        bytes memory context = abi.encodePacked(nodeOwner);\\n        /*\\n         * The calldata the gateway has to resolve\\n         */\\n        bytes memory callData = abi.encodeWithSelector(\\n            IResolverService.resolveWithContext.selector,\\n            name,\\n            data,\\n            context\\n        );\\n\\n        revert OffchainLookup(\\n            address(this),\\n            _verifier.gatewayUrls,\\n            callData,\\n            ERC3668Resolver.resolveWithProof.selector,\\n            callData\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to resolve a domain name with proof using an off-chain callback mechanism.\\n     * @param response The response received from off-chain resolution.\\n     * @param extraData The actual calldata that was called on the gateway.\\n     * @return the result of the offchain lookup\\n     */\\n    function resolveWithProof(bytes calldata response, bytes calldata extraData) external view returns (bytes memory) {\\n        /*\\n         * decode the calldata that was encoded in the resolve function for IResolverService.resolveWithContext()\\n         * bytes memory callData = abi.encodeWithSelector(IResolverService.resolveWithContext.selector, name, data context);\\n         */\\n        (bytes memory name, bytes memory data) = abi.decode(extraData[4:], (bytes, bytes));\\n        /*\\n         * Get the verifier for the given name.\\n         * reverts if no verifier was set in advance\\n         */\\n        (CcipVerifier memory _ccipVerifier, ) = getVerifierOfDomain(name);\\n        /*\\n         * to enable the ERC3668Resolver to return data other than bytes it might be possible to override the\\n         * resolvewithProofCallback function.\\n         */\\n        bytes4 callBackSelector = ICcipResponseVerifier(_ccipVerifier.verifierAddress).onResolveWithProof(name, data);\\n        /*\\n         * reverts when no callback selector was found. This should normally never happen because setVerifier() checks * that the verifierAddress implements the ICcipResponseVerifier interface. However, it might be possible by\\n         * overriding the onResolveWithProof function and return 0x. In that case, the contract reverts here.\\n         */\\n        require(callBackSelector != bytes4(0), \\\"No callback selector found\\\");\\n\\n        /*\\n         * staticcall to the callback function on the verifier contract.\\n         * This function always returns bytes even the called function returns a Fixed type due to the return type of staticcall in solidity.\\n         * So you might want to decode the result using abi.decode(resolveWithProofResponse, (bytes))\\n         */\\n        (bool success, bytes memory resolveWithProofResponse) = address(_ccipVerifier.verifierAddress).staticcall(\\n            abi.encodeWithSelector(callBackSelector, response, extraData)\\n        );\\n        /*\\n         * Reverts if the call is not successful\\n         */\\n        require(success, \\\"staticcall to verifier failed\\\");\\n        return resolveWithProofResponse;\\n    }\\n\\n    /**\\n     * @notice Get metadata about the CCIP Resolver\\n     * @dev This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return name The name of the resolver (\\\"CCIP RESOLVER\\\")\\n     * @return coinType Resolvers coin type (60 for Ethereum)\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     * @return storageType Storage Type (0 for EVM)\\n     * @return storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\\n     * @return context can be l2 resolver contract address for evm chain but can be any l2 storage identifier for non-evm chain\\n     */\\n    function metadata(\\n        bytes calldata name\\n    ) external view returns (string memory, uint256, string memory, uint8, bytes memory, bytes memory) {\\n        /*\\n         * Get the verifier for the given name.\\n         * reverts if no verifier was set in advance\\n         */\\n        (CcipVerifier memory _ccipVerifier, ) = getVerifierOfDomain(name);\\n\\n        /*\\n         * Get the metadata from the verifier contract\\n         */\\n        (\\n            string memory resolverName,\\n            uint256 coinType,\\n            string memory graphqlUrl,\\n            uint8 storageType,\\n            bytes memory storageLocation,\\n\\n        ) = ICcipResponseVerifier(_ccipVerifier.verifierAddress).metadata(name);\\n\\n        /*\\n         * To determine the context of the request, we need to get the owner of the node.\\n         */\\n        bytes32 node = name.namehash(0);\\n        bytes memory context = abi.encodePacked(getNodeOwner(node));\\n\\n        return (resolverName, coinType, graphqlUrl, storageType, storageLocation, context);\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Public Functions\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice Get the CCIP Verifier and node for a given domain name\\n     * @dev This function allows retrieving the CCIP Verifier and its associated node for a given domain name. For subdomains, it will return the CCIP Verifier of the closest parent.\\n     * @param name The domain name in bytes (dnsEncoded)\\n     * @return _ccipVerifier The CCIP Verifier associated with the given domain name\\n     * @return node The node associated with the given domain name\\n     */\\n    function getVerifierOfDomain(bytes memory name) public view returns (CcipVerifier memory, bytes32) {\\n        return getVerifierOfSegment(name, 0, name.namehash(0));\\n    }\\n\\n    /**\\n     * @notice Check if the contract supports a specific interface\\n     * @dev Implements the ERC-165 standard to check for interface support.\\n     * @param interfaceID The interface identifier to check\\n     * @return True if the contract supports the given interface, otherwise false\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return interfaceID == type(IExtendedResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Internal Functions\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice Get the owner of the ENS node either from the ENS registry or the NameWrapper contract\\n     * @dev This function adds support for ENS nodes owned by the NameWrapper contract.\\n     * @param node The ENS node to query for the owner\\n     * @return nodeOwner The address of the owner of the ENS node\\n     */\\n    function getNodeOwner(bytes32 node) internal view returns (address nodeOwner) {\\n        nodeOwner = ensRegistry.owner(node);\\n        if (nodeOwner == address(nameWrapper)) {\\n            nodeOwner = nameWrapper.ownerOf(uint256(node));\\n        }\\n    }\\n\\n    /*\\n     * --------------------------------------------------\\n     *    Private Functions\\n     * --------------------------------------------------\\n     *\\n     */\\n\\n    /**\\n     * @notice Sets a Cross-chain Information Protocol (CCIP) Verifier for a specific domain node.\\n     * @param node The domain node for which the CCIP Verifier is set.\\n     * @param verifierAddress The address of the CcipResponseVerifier contract.\\n     * @param urls The gateway url that should handle the OffchainLookup.\\n     */\\n    function _setVerifierForDomain(bytes32 node, address verifierAddress, string[] memory urls) private {\\n        require(verifierAddress != address(0), \\\"verifierAddress is 0x0\\\");\\n        /*\\n         * We're doing a staticcall here to check if the verifierAddress implements the ICcipResponseVerifier interface.\\n         * This is done to prevent the user from setting an arbitrary address as the verifierAddress.\\n         */\\n        (bool success, bytes memory response) = verifierAddress.staticcall(\\n            abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", type(ICcipResponseVerifier).interfaceId)\\n        );\\n\\n        /*\\n         * A successful static call will return 0x0000000000000000000000000000000000000000000000000000000000000001\\n         * Hence we've to check that the last bit is set.\\n         */\\n        require(\\n            success && response.length == 32 && (response[response.length - 1] & 0x01) == 0x01,\\n            \\\"verifierAddress is not a CCIP Verifier\\\"\\n        );\\n        /*\\n         * Check that the url is non-null.\\n         * Although it may not be a sufficient url check, it prevents users from passing undefined or empty strings.\\n         */\\n        require(urls.length > 0, \\\"at least one gateway url has to be provided\\\");\\n\\n        /*\\n         * Set the new verifier for the given node.\\n         */\\n        CcipVerifier memory _ccipVerifier = CcipVerifier(urls, ICcipResponseVerifier(verifierAddress));\\n        ccipVerifier[node] = _ccipVerifier;\\n\\n        emit VerifierAdded(node, verifierAddress, urls);\\n    }\\n\\n    /**\\n     * @dev Recursively searches for a verifier associated with a segment of the given domain name.\\n     * If a verifier is found, it returns the verifier and the corresponding node.\\n     *\\n     * @param name The domain name in bytes\\n     * @param offset The current offset in the name being processed\\n     * @param node The current node being processed\\n     * @return The CcipVerifier associated with the domain segment, and the corresponding node\\n     *\\n     * @notice This function searches for a verifier starting from the given offset in the domain name.\\n     *         It checks if a verifier is set for the current node, and if not, it continues with the next label.\\n     *         If the end of the name is reached and no verifier is found, it reverts with an UnknownVerifier error.\\n     */\\n    function getVerifierOfSegment(\\n        bytes memory name,\\n        uint256 offset,\\n        bytes32 node\\n    ) private view returns (CcipVerifier memory, bytes32) {\\n        /*\\n         * If we reached the root node and there is no verifier set, we revert with UnknownVerifier\\n         */\\n        if (offset >= name.length - 1) {\\n            /*\\n             *If no specific verifier is set for the given node, we return the default verifier\\n             */\\n            CcipVerifier memory defaultCcipVerifier = ccipVerifier[DEFAULT_VERIFIER];\\n            return (defaultCcipVerifier, name.namehash(0));\\n        }\\n\\n        CcipVerifier memory _ccipVerifier = ccipVerifier[node];\\n        /*\\n         * If the verifier is set for the given node, we return it and break the recursion\\n         */\\n        if (address(_ccipVerifier.verifierAddress) != address(0)) {\\n            return (_ccipVerifier, name.namehash(0));\\n        }\\n        /*\\n         * Otherwise, continue with the next label\\n         */\\n        (, offset) = name.readLabel(offset);\\n        return getVerifierOfSegment(name, offset, name.namehash(offset));\\n    }\\n}\\n\",\"keccak256\":\"0x9b0c128da3608aaab7f3bff0b4d1f4435af993760a291e12dd1a428b5a9febb0\",\"license\":\"MIT\"},\"contracts/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data) external view returns (bytes memory);\\n}\\n\\ninterface IResolverService {\\n    function resolveWithContext(\\n        bytes calldata name,\\n        bytes calldata data,\\n        bytes calldata context\\n    ) external view returns (bytes memory result);\\n}\\n\",\"keccak256\":\"0x9ee6b2d6045d981768f2d81c038848da578e337a954874a5f6697524abfab244\",\"license\":\"MIT\"},\"contracts/IMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IMetadataResolver {\\n    /**\\n     * @notice Get metadata about the CCIP Resolver\\n     * @dev This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return name The name of the resolver (\\\"CCIP RESOLVER\\\")\\n     * @return coinType Resolvers coin type (60 for Ethereum)\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     * @return storageType Storage Type (0 for EVM)\\n     * @return storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\\n     * @return context can be l2 resolver contract address for evm chain but can be any l2 storage identifier for non evm chain\\n     *\\n     */\\n    function metadata(bytes calldata name) external view returns (string memory, uint256, string memory, uint8, bytes memory, bytes memory);\\n}\\n\",\"keccak256\":\"0x9ba6dab3e8566efbedd3ca441399bc66bce123f3d5e000c2f14a1dc2c9c4af67\",\"license\":\"MIT\"},\"contracts/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\\n}\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) public pure virtual override returns (bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xe0acf72daed5a8ef1473f9e7e6ec1c9549baf194c4b4f71e891337cff0b2c35b\",\"license\":\"MIT\"},\"contracts/verifier/CcipResponseVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ICcipResponseVerifier} from \\\"./ICcipResponseVerifier.sol\\\";\\nimport {SupportsInterface, ISupportsInterface} from \\\"../SupportsInterface.sol\\\";\\n\\nabstract contract CcipResponseVerifier is ICcipResponseVerifier, SupportsInterface {\\n    /*\\n     *   --------------------------------------------------\\n     *    EVENTS\\n     *   --------------------------------------------------\\n     */\\n\\n    event GraphQlUrlChanged(string newGraphQlUrl);\\n    event OwnerChanged(address newOwner);\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    State Variables\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice The owner of the contract\\n     * The owner of the contract can set the graphQlUrl and determine a new owner\\n     */\\n    address public owner;\\n\\n    string public graphqlUrl;\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Modifier\\n     *   --------------------------------------------------\\n     */\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set the GraphQL endpoint URL for the contract\\n     * @dev This function can only be called by the current owner.\\n     * @param _graphqlUrl The new GraphQL endpoint URL to be set\\n     */\\n    function setGraphUrl(string memory _graphqlUrl) external onlyOwner {\\n        graphqlUrl = _graphqlUrl;\\n        emit GraphQlUrlChanged(_graphqlUrl);\\n    }\\n\\n    /**\\n     * @notice Set the new owner of the contract\\n     * @dev This function can only be called by the current owner.\\n     * @param _owner The address of the new owner\\n     */\\n    function setOwner(address _owner) external onlyOwner {\\n        owner = _owner;\\n        emit OwnerChanged(_owner);\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    Constructor\\n     *   --------------------------------------------------\\n     */\\n\\n    constructor(address _owner, string memory _graphqlUrl) {\\n        owner = _owner;\\n        graphqlUrl = _graphqlUrl;\\n    }\\n\\n    /*\\n     *   --------------------------------------------------\\n     *    External functions\\n     *   --------------------------------------------------\\n     */\\n\\n    /**\\n     * @notice Check if the contract supports the given interface\\n     * @dev This function checks if the contract supports the provided interface by comparing the `interfaceID` with the supported interface IDs.\\n     * @param interfaceID The interface ID to check for support\\n     * @return true if the contract supports the interface, false otherwise\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public pure override(SupportsInterface, ISupportsInterface) returns (bool) {\\n        /*\\n         * Supports both ICcipResponseVerifier and ISupportsInterfacef\\n         */\\n        return interfaceID == type(ICcipResponseVerifier).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    /**\\n     * @notice To support other to be resolved than just bytes it is possible to override this function. In that case the function selector of the overridden function should be returned. The default implementation returns the function selector of the `resolveWithProof` function.\\n     * @return The function selector of the `resolveWithProof` function\\n     */\\n    function onResolveWithProof(bytes calldata, bytes calldata) public pure virtual override returns (bytes4) {\\n        return this.resolveWithProof.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x9f36bf96ed30ed29aa1921e46c2a68b827c0c402046c7336d667bbaab5e43146\",\"license\":\"MIT\"},\"contracts/verifier/ICcipResponseVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {ISupportsInterface} from \\\"../SupportsInterface.sol\\\";\\n\\ninterface ICcipResponseVerifier is ISupportsInterface {\\n    function resolveWithProof(bytes calldata response, bytes calldata extraData) external view returns (bytes memory);\\n\\n    function onResolveWithProof(bytes calldata name, bytes calldata data) external pure returns (bytes4);\\n\\n    function metadata(\\n        bytes calldata name\\n    ) external view returns (string memory, uint256, string memory, uint8, bytes memory, bytes memory);\\n}\\n\",\"keccak256\":\"0x74f5c5afb0097da674c00b833b504acb055c08ed82446909634dd0be04c3e9fb\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523462000055575b62000023620000196200033d565b929190916200039d565b6040516120c762000e5e82396080518181816105e5015261153e015260a051818181610889015261159801526120c790f35b6200005e600080fd5b6200000b565b600080fd5b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000ac57604052565b620000b662000073565b604052565b90620000d2620000ca60405190565b92836200008a565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036200006457565b90505190620000d282620000e3565b6001600160a01b038116620000ee565b90505190620000d28262000105565b60209081906001600160401b0381116200013d57020190565b6200014762000073565b020190565b6020906200016d906001600160401b0381116200017157601f01601f191690565b0190565b6200006962000073565b60005b8381106200018f5750506000910152565b81810151838201526020016200017e565b929190620000d291620001bd620001b7836200014c565b620000bb565b94828652602086019183820111156200017b57620001d9600080fd5b6200017b565b90620000e09181601f82011215620001fe575b602081519101620001a0565b62000207600080fd5b620001f2565b9092919262000220620001b78262000124565b93818552602080860192028301928184116200028a575b80925b84841062000249575050505050565b835160209182916200026f9086906001600160401b0381116200027b575b8601620001df565b8152019301926200023a565b62000284600080fd5b62000267565b62000293600080fd5b62000237565b90620000e09181601f82011215620002b8575b6020815191016200020d565b620002c1600080fd5b620002ac565b6080818303126200032e575b620002df8282620000f6565b92620000e0620002f38460208501620000f6565b936040620003048282870162000115565b946001806060830151931b0382116200031f575b0162000299565b62000328600080fd5b62000318565b62000337600080fd5b620002d3565b6200036062002f25803803806200035481620000bb565b928339810190620002c7565b90919293565b620000d4620000e0620000e09290565b620000e09062000366565b620000e0620000e0620000e09290565b620000e0600062000381565b60805260a05290620003b4620000d4600062000376565b6001600160a01b03831603620003c8575050565b620000d291620003d762000391565b62000c63565b15620003e557565b60405162461bcd60e51b815260206004820152601660248201527f76657269666965724164647265737320697320307830000000000000000000006044820152606490fd5b906200043a620001b7836200014c565b918252565b3d156200045c57620004513d6200042a565b903d6000602084013e565b606090565b50634e487b7160e01b600052601160045260246000fd5b919082039182116200048657565b620000d262000461565b50634e487b7160e01b600052603260045260246000fd5b906001602091620004b6845190565b811015620004c5575b02010190565b620004cf62000490565b620004bf565b620004eb620004e5620000e09290565b60f81b90565b6001600160f81b03191690565b156200050057565b60405162461bcd60e51b815260206004820152602660248201527f766572696669657241646472657373206973206e6f74206120434349502056656044820152653934b334b2b960d11b6064820152608490fd5b156200055c57565b60405162461bcd60e51b815260206004820152602b60248201527f6174206c65617374206f6e6520676174657761792075726c2068617320746f2060448201526a1899481c1c9bdd9a59195960aa1b6064820152608490fd5b620000e090620000d4906001600160a01b031682565b620000e090620005b5565b620000e090620005cb565b620000e06040620000bb565b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b906001600283049216801562000642575b60208310146200063857565b620000d262000604565b91607f16916200062c565b906200066190600019906020036008021c90565b8154169055565b9160001960089290920291821b911b5b9181191691161790565b919062000697620000e0620006a09362000381565b90835462000668565b9055565b620000d29160009162000682565b818110620006be575050565b80620006ce6000600193620006a4565b01620006b2565b9060009162000702620006ed82600052602060002090565b928354600019600883021c1916906002021790565b905555565b91929060208210156200077557601f84116001146200073957620006a0929350600019600883021c1916906002021790565b50906200076f620000d2936001620007656200075a85600052602060002090565b92601f602091010490565b82019101620006b2565b620006d5565b50620007ba82936200078e600194600052602060002090565b620007b26020601f860104820192601f861680620007c2575b50601f602091010490565b0190620006b2565b600202179055565b620007d0908886036200064d565b38620007a7565b92909160209068010000000000000000831162000843575b1015620008375760208110156200081757620006a091600019600883021c1916906002021790565b60019160ff19166200082e84600052602060002090565b55600202019055565b60019150600202019055565b6200084d62000073565b620007ef565b90815462000861816200061b565b908183116200088f575b8183106200087a575b50505050565b620008859362000707565b3880808062000874565b6200089d83838387620007d7565b6200086b565b6000620000d29162000853565b620000d29115620008a357620008c5620005ed565b620008a3565b818110620008d7575050565b80620008e76000600193620008b0565b01620008cb565b9091828110620008fd57505050565b620000d29290620009149092600052602060002090565b9081019101620008cb565b90620000d29168010000000000000000821162000943575b805490828155620008ee565b6200094d62000073565b62000937565b9190601f81116200096357505050565b62000977620000d293600052602060002090565b906020601f84018190048301931062000999575b6020601f90910104620007b2565b90915081906200098b565b90620009ae815190565b906001600160401b03821162000a86575b620009d782620009d085546200061b565b8562000953565b602090601f831160011462000a1657620006a092916000918362000a0a575b5050600019600883021c1916906002021790565b015190503880620009f6565b601f1983169162000a2c85600052602060002090565b9260005b81811062000a6d5750916002939185600196941062000a53575b50505002019055565b01516000196008601f8516021c1916905538808062000a4a565b9193602060018192878701518155019501920162000a30565b62000a9062000073565b620009bf565b90620000d291620009a4565b62000ad262000ac662000ab3845190565b9362000ac085856200091f565b60200190565b91600052602060002090565b6000915b83831062000ae45750505050565b600160208262000afe62000af784955190565b8662000a96565b0192019201919062000ad6565b90620000d29162000aa2565b906001600160a01b039062000678565b9062000b3b620000e0620006a092620005d6565b825462000b17565b9062000b7c60206001620000d29462000b6c6000820162000b65600088015190565b9062000b0b565b019201516001600160a01b031690565b9062000b27565b90620000d29162000b43565b62000bb4620000696020936200016d9362000ba8815190565b80835293849260200190565b958691016200017b565b90620000e09162000b8f565b9062000be262000bd8835190565b8083529160200190565b908162000bf56020830284019460200190565b926000915b83831062000c0a57505050505090565b9091929394602062000c3062000c298385600195038752895162000bbe565b9760200190565b930193019193929062000bfa565b6001600160a01b039091168152620000e0916040820191602081840391015262000bca565b909162000d87600062000c9062000c7e620000d48362000376565b6001600160a01b0387161415620003dd565b62000d10818062000cd862000ce8633cfb793d60e11b62000cb060405190565b6301ffc9a760e01b6020820152928391602483016001600160e01b0319909116815260200190565b602082018103825203826200008a565b805190602001895afa62000cfb6200043f565b8162000e3a575b8162000dc7575b50620004f8565b62000d3762000d1d845190565b62000d3062000d2c8462000381565b9190565b1162000554565b62000d818462000d4787620005d6565b9262000d7262000d56620005e1565b9462000d628884880152565b6001600160a01b03166020860152565b90600052602052604060002090565b62000b83565b7f83c85f7f7423b99a5b5948f29e31a5d7087ef88402d6c71c09a63ee4c0a3af5d919262000dc262000db860405190565b9283928362000c3e565b0390a2565b905062000e3262000e2462000e1162000e0362000de2855190565b9462000dfc60019662000df58862000381565b9062000478565b90620004a7565b516001600160f81b03191690565b62000e1c84620004d5565b1692620004d5565b916001600160f81b03191690565b143862000d09565b905062000e45815190565b62000e5562000d2c602062000381565b149062000d0256fe60806040526004361015610018575b610016600080fd5b005b60003560e01c806301ffc9a7146100cc578063354f0a89146100c3578063474591c7146100ba5780637d73b231146100b15780638a596ebe146100a85780639061b9231461009f578063a0126caa14610096578063a8e5fbc01461008d5763f4d4d2f80361000e576100886108ba565b61000e565b50610088610872565b50610088610848565b506100886107cb565b50610088610714565b506100886105ce565b5061008861056e565b506100886103bf565b50610088610124565b600080fd5b6001600160e01b031981165b036100d557565b905035906100fa826100da565b565b9061011091602081830312610113576100ed565b90565b61011b600080fd5b6100ed565b9052565b5034610157575b61015361014161013c3660046100fc565b6114c5565b60405191829182901515815260200190565b0390f35b61015f600080fd5b61012b565b806100e6565b905035906100fa82610164565b6001600160a01b031690565b6001600160a01b0381166100e6565b905035906100fa82610183565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176101e157604052565b6101e96101a9565b604052565b906100fa6101fb60405190565b92836101c0565b602080916001600160401b03811161021957020190565b6102216101a9565b020190565b6102446020916001600160401b03811161024857601f01601f191690565b0190565b61019f6101a9565b90826000939282370152565b9291906100fa9161027461026f83610226565b6101ee565b94828652602086019183820111156102505761028e600080fd5b610250565b906101109181601f820112156102af575b60208135910161025c565b6102b7600080fd5b6102a4565b909291926102cc61026f82610202565b938185526020808601920283019281841161032b575b80925b8484106102f3575050505050565b602080916103138587356001600160401b03811161031e575b8601610293565b8152019301926102e5565b610326600080fd5b61030c565b610333600080fd5b6102e2565b906101109181601f82011215610354575b6020813591016102bc565b61035c600080fd5b610349565b90916060828403126103b2575b61011061037b848461016a565b936103898160208601610192565b936040810135906001600160401b0382116103a5575b01610338565b6103ad600080fd5b61039f565b6103ba600080fd5b61036e565b50346103df575b6103da6103d4366004610361565b9161097d565b604051005b6103e7600080fd5b6103c6565b9061011091602081830312610421575b8035906001600160401b038211610414575b01610293565b61041c600080fd5b61040e565b610429600080fd5b6103fc565b60005b8381106104415750506000910152565b8181015183820152602001610431565b61047261019f60209361024493610466815190565b80835293849260200190565b9586910161042e565b9061011091610451565b9061049b610491835190565b8083529160200190565b90816104ad6020830284019460200190565b926000915b8383106104c157505050505090565b909192939460206104e46104dd8385600195038752895161047b565b9760200190565b93019301919392906104b2565b61011090610177906001600160a01b031682565b610110906104f1565b61011090610505565b6101209061050e565b90610110906020806105416040840160008701518582036000870152610485565b940151910190610517565b929160206105696100fa9360408701908782036000890152610520565b940152565b503461059e575b6105886105833660046103ec565b61149e565b9061015361059560405190565b9283928361054c565b6105a6600080fd5b610575565b60009103126105b657565b6100fa600080fd5b6020810192916100fa9190610517565b5034610611575b6105e03660046105ab565b6101537f00000000000000000000000000000000000000000000000000000000000000005b604051918291826105be565b610619600080fd5b6105d5565b909182601f83011215610659575b60208235926001600160401b03841161064c575b0192828401116105b657565b610654600080fd5b610640565b610661600080fd5b61062c565b9061068e9160208183031261069f575b8035906001600160401b038211610692575b0161061e565b9091565b61069a600080fd5b610688565b6106a7600080fd5b610676565b94906106ed610110979593610706956106e06106d86106f99560c08c01908c6000818403910152610451565b9260208b0152565b88820360408a0152610451565b60ff9093166060870152565b8482036080860152610451565b9160a0818403910152610451565b503461074b575b61015361073261072c366004610666565b9061109c565b9261074296949692919260405190565b968796876106ac565b610753600080fd5b61071b565b916040838303126107ad575b61068e6107838385356001600160401b0381116107a0575b860161061e565b9390946020810135906001600160401b038211610692570161061e565b6107a8600080fd5b61077c565b6107b5600080fd5b610764565b602080825261011092910190610451565b346107eb575b6107e86107df366004610758565b92919091610b0b565b50565b6107f3600080fd5b6107d1565b90610110916020818303121561016a57610810600080fd5b61016a565b61011090610177565b6101109054610815565b600161084261011092600090600052602052604060002090565b0161081e565b5034610865575b6101536106056108603660046107f8565b610828565b61086d600080fd5b61084f565b50346108ad575b6108843660046105ab565b6101537f0000000000000000000000000000000000000000000000000000000000000000610605565b6108b5600080fd5b610879565b50346108e7575b6101536108db6108d2366004610758565b92919091610dcb565b604051918291826107ba565b6108ef600080fd5b6108c1565b6101106101106101109290565b1561090857565b60405162461bcd60e51b815260206004820152600b60248201526a06e6f6465206973203078360ac1b6044820152606490fd5b0390fd5b1561094657565b60405162461bcd60e51b815260206004820152600f60248201526e37b7363c903737b2329037bbb732b960891b6044820152606490fd5b906100fa929161099b61099361011060006108f4565b821415610901565b6109c1336109bb6109ae61017785611532565b916001600160a01b031690565b1461093f565b611ce3565b61011091369161025c565b610120906001600160a01b031660601b90565b610244816014936109d1565b919061019f81610a07816102449560209181520190565b8095610250565b93610a2e610110969492610a3c94606088019188830360008a01526109f0565b9185830360208701526109f0565b916040818403910152610451565b90610a56610491835190565b9081610a686020830284019460200190565b926000915b838310610a7c57505050505090565b90919293946020610a986104dd8385600195038752895161047b565b9301930191939290610a6d565b916101109593610add610afe93610aeb93610ad060a088019260008901906001600160a01b03169052565b8682036020880152610a4a565b908482036040860152610451565b6001600160e01b03199094166060830152565b6080818403910152610451565b9060049450610b8090610b3a94610b8f94610b24606090565b50610b3261058384876109c6565b979097611532565b92610b63610b4760405190565b8095610b576020830191826109e4565b908103825203856101c0565b60405163f8c30f6360e01b9690998a976020890190815201610a0e565b602082018103825203836101c0565b61093b6000610b9d3061050e565b92015192631e9a9a5f60e31b81610bb360405190565b630556f18360e41b815295869560048701610aa5565b90939293848311610bf0575b8411610be3575b8101920390565b610beb600080fd5b610bdc565b610bf8600080fd5b610bd5565b919061011090604084820312610c44575b610c298185356001600160401b03811161031e578601610293565b936020810135906001600160401b0382116104145701610293565b610c4c600080fd5b610c0e565b6101109051610815565b905051906100fa826100da565b906101109160208183031215610c5b57610c80600080fd5b610c5b565b6040808252610110939192610c9c91840190610451565b916020818403910152610451565b506040513d6000823e3d90fd5b610cca610cc46101109290565b60e01b90565b6001600160e01b03191690565b15610cde57565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f2063616c6c6261636b2073656c6563746f7220666f756e640000000000006044820152606490fd5b9290610d40906101109593604086019186830360008801526109f0565b9260208185039101526109f0565b90610d5b61026f83610226565b918252565b3d15610d7a57610d6f3d610d4e565b903d6000602084013e565b606090565b15610d8657565b60405162461bcd60e51b815260206004820152601d60248201527f73746174696363616c6c20746f207665726966696572206661696c65640000006044820152606490fd5b9092610ec4610cca93610e8495610de0606090565b50600493610e06610dfe61068e83610df7896108f4565b8188610bc9565b810190610bfd565b93909260208781610e168761149e565b500196610e4d610e2d610e288a610c51565b61050e565b91610e5663077b4e3c91610e4060405190565b9a8b968795869560e01b90565b85528401610c85565b03915afa938415610f18575b600094610ede575b50610e9b610e28610eb59596610e9660009d8e9d8e610cb7565b6001600160e01b03198a161415610cd7565b610c51565b97610ea560405190565b9788966020880190815201610d23565b602082018103825203826101c0565b602081019051915afa610110610ed8610d60565b91610d7f565b610eb59450610e28610f09610e9b9260203d8111610f11575b610f0181836101c0565b810190610c68565b955050610e6a565b503d610ef7565b610f20610caa565b610e62565b9291906100fa91610f3861026f83610226565b948286526020860191838201111561042e57610f52600080fd5b61042e565b906101109181601f82011215610f73575b602081519101610f25565b610f7b600080fd5b610f68565b905051906100fa82610164565b60ff81166100e6565b905051906100fa82610f8d565b909160c08284031261107e575b610fcf8360008401516001600160401b038111611071575b8401610f57565b92610fdd8160208501610f80565b92610ffd8260408301516001600160401b038111611064575b8301610f57565b9261011061100e8460608501610f96565b9361102e8160808601516001600160401b038111611057575b8601610f57565b9360a0810151906001600160401b03821161104a575b01610f57565b611052600080fd5b611044565b61105f600080fd5b611027565b61106c600080fd5b610ff6565b611079600080fd5b610fc8565b611086600080fd5b610fb0565b6020808252610110939101916109f0565b916110d8919060006110c0610e2860206110b9610583878a6109c6565b5001610c51565b638a596ebe906110cf60405190565b95869260e01b90565b825281806110ea878a6004840161108b565b03915afa91821561119e575b600080808080959394929891979096611161575b5061111b6111309261112b926109c6565b61112560006108f4565b90611229565b611532565b9161115961113d60405190565b809461114d6020830191826109e4565b908103825203846101c0565b959493929190565b90955061118f919650611130945061112b935061111b973d8091833e61118781836101c0565b810190610fa3565b5096509691985096919361110a565b6111a6610caa565b6110f6565b50634e487b7160e01b600052601160045260246000fd5b919082039182116111cf57565b6100fa6111ab565b156111de57565b60405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606490fd5b01918252565b611233828261139d565b909161123f60006108f4565b938484146112a05750611253929350611229565b61127e9161128a9161126460405190565b938492602084019283602081611223610244938396959052565b908103825203826101c0565b61129c611295825190565b9160200190565b2090565b915061011092506112c86101106112b86112cc935190565b6112c260016108f4565b906111c2565b9190565b146111d7565b156112d957565b60405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606490fd5b50634e487b7160e01b600052603260045260246000fd5b906001602091611343845190565b811015611351575b02010190565b61135961131e565b61134b565b61136e6101106101109260ff1690565b60ff1690565b6101109060f81c61135e565b6101106101106101109260ff1690565b919082018092116111cf57565b611429610110919392936113af600090565b506113c56113be610110835190565b86106112d2565b6113f06113eb6113e66113d88885611335565b516001600160f81b03191690565b611374565b611380565b90816000916113fe836108f4565b82111561143957611423925061141d61141760016108f4565b89611390565b9061144b565b94611390565b61143360016108f4565b90611390565b5050611423906108f4565b156100d557565b60209061147061145b8585611390565b6114696112c8610110855190565b1115611444565b01012090565b61011060406101ee565b611488611476565b906060825260006020830152565b610110611480565b61068e906114aa611496565b506114b560006108f4565b6114bf8183611229565b91611fd2565b639061b92360e01b6001600160e01b03198216149081156114e4575090565b61011091506001600160e01b0319166301ffc9a760e01b1490565b905051906100fa82610183565b9061011091602081830312156114ff57611524600080fd5b6114ff565b610110906108f4565b611571919060206115627f000000000000000000000000000000000000000000000000000000000000000061050e565b6302571be3906110cf60405190565b82526004820184905260249082905afa928315611684575b600093611664575b50826115bc7f000000000000000000000000000000000000000000000000000000000000000061050e565b906115cf6001600160a01b0383166109ae565b146115d8575050565b6116189293509060209161160a6115f3636352211e93611529565b926115fd60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa908115611657575b60009161162f575090565b610110915060203d8111611650575b61164881836101c0565b81019061150c565b503d61163e565b61165f610caa565b611624565b61167d91935060203d81116116505761164881836101c0565b9138611591565b61168c610caa565b611589565b6101776101106101109290565b61011090611691565b156116ae57565b60405162461bcd60e51b81526020600482015260166024820152750766572696669657241646472657373206973203078360541b6044820152606490fd5b6116ff6116f96101109290565b60f81b90565b6001600160f81b03191690565b1561171357565b60405162461bcd60e51b815260206004820152602660248201527f766572696669657241646472657373206973206e6f74206120434349502056656044820152653934b334b2b960d11b6064820152608490fd5b1561176e57565b60405162461bcd60e51b815260206004820152602b60248201527f6174206c65617374206f6e6520676174657761792075726c2068617320746f2060448201526a1899481c1c9bdd9a59195960aa1b6064820152608490fd5b9061012090610815565b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611822575b602083101461181a57565b6100fa6117e8565b91607f169161180f565b9061183f90600019906020036008021c90565b8154169055565b9160001960089290920291821b911b5b9181191691161790565b9190611871610110611879936108f4565b908354611846565b9055565b6100fa91600091611860565b818110611894575050565b806118a2600060019361187d565b01611889565b600019600883021c1916906002021790565b906000916118d86118d082600052602060002090565b9283546118a8565b905555565b919290602082101561193557601f84116001146118ff576118799293506118a8565b50906119306100fa93600161192761191c85600052602060002090565b92601f602091010490565b82019101611889565b6118ba565b50611975829361194c600194600052602060002090565b61196e6020601f860104820192601f86168061197d575b50601f602091010490565b0190611889565b600202179055565b6119899088860361182c565b38611963565b929091602090600160401b83116119e4575b10156119d85760208110156119b957611879916118a8565b60019160ff19166119cf84600052602060002090565b55600202019055565b60019150600202019055565b6119ec6101a9565b6119a1565b9081546119fd816117ff565b90818311611a26575b818310611a14575b50505050565b611a1d936118dd565b38808080611a0e565b611a328383838761198f565b611a06565b60006100fa916119f1565b6100fa9115611a3757611a536117d1565b611a37565b818110611a63575050565b80611a716000600193611a42565b01611a58565b9091828110611a8557505050565b6100fa9290611a9a9092600052602060002090565b9081019101611a58565b906100fa91600160401b8211611ac0575b805490828155611a77565b611ac86101a9565b611ab5565b9190601f8111611adc57505050565b611aee6100fa93600052602060002090565b906020601f840181900483019310611b0e575b6020601f9091010461196e565b9091508190611b01565b90611b21815190565b906001600160401b038211611bde575b611b4582611b3f85546117ff565b85611acd565b602090601f8311600114611b7357611879929160009183611b68575b50506118a8565b015190503880611b61565b601f19831691611b8885600052602060002090565b9260005b818110611bc657509160029391856001969410611bad575b50505002019055565b01516000196008601f8516021c19169055388080611ba4565b91936020600181928787015181550195019201611b8c565b611be66101a9565b611b31565b906100fa91611b18565b611c20611c14611c03845190565b93611c0e8585611aa4565b60200190565b91600052602060002090565b6000915b838310611c315750505050565b6001602082611c48611c4284955190565b86611beb565b01920192019190611c24565b906100fa91611bf5565b906001600160a01b0390611856565b90611c7d6101106118799261050e565b8254611c5e565b90611cb0602060016100fa94611ca860008201611ca2600088015190565b90611c54565b019201610c51565b90611c6d565b906100fa91611c84565b6001600160a01b0390911681526101109160408201916020818403910152610a4a565b9091611dcf6000611d0a611cf96101778361169e565b6001600160a01b03871614156116a7565b611d718180610eb5611d4e633cfb793d60e11b611d2660405190565b6301ffc9a760e01b6020820152928391602483016001600160e01b0319909116815260200190565b805190602001895afa611d5f610d60565b81611e5d575b81611e0c575b5061170c565b611d8e611d7c845190565b611d886112c8846108f4565b11611767565b611dca84611d9b8761050e565b92611dbb611da7611476565b94611db28884880152565b602086016117c7565b90600052602052604060002090565b611cb6565b7f83c85f7f7423b99a5b5948f29e31a5d7087ef88402d6c71c09a63ee4c0a3af5d9192611e07611dfe60405190565b92839283611cc0565b0390a2565b9050611e56611e48611e386113d8611e22855190565b94611e326001966112c2886108f4565b90611335565b611e41846116ec565b16926116ec565b916001600160f81b03191690565b1438611d6b565b9050611e67815190565b611e746112c860206108f4565b1490611d65565b61011060006108f4565b90610d5b61026f83610202565b80546000939291611eaf611ea5836117ff565b8085529360200190565b9160018116908115611f015750600114611ec857505050565b611edb9192939450600052602060002090565b916000925b818410611eed5750500190565b805484840152602090930192600101611ee0565b92949550505060ff1916825215156020020190565b9061011091611e92565b906100fa611f3a92611f3160405190565b93848092611f16565b03836101c0565b61011090611f20565b90611f53825490565b611f5c81611e85565b92611f706020850191600052602060002090565b6000915b838310611f815750505050565b600160208192611f9085611f41565b815201920192019190611f74565b906100fa611fc06001611faf611476565b94610842611fbc82611f4a565b8752565b602084016117c7565b61011090611f9e565b909291611fdd611496565b50611fec6101106112b8845190565b8410156120615761201161200c6000928390600052602052604060002090565b611fc9565b90612021610e2860208401610c51565b6120306109ae6101778461169e565b0361205157505061204561068e92938261139d565b90506114bf8183611229565b61011092919450611125906108f4565b50915061011060009261112561208b61200c61207b611e7b565b8790600052602052604060002090565b946108f456fea2646970667358221220a428bba88e3c3faf7ef7890ccfb4a1984d97d93105b1fbeb2d7e1ed1b8c2dcb864736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610018575b610016600080fd5b005b60003560e01c806301ffc9a7146100cc578063354f0a89146100c3578063474591c7146100ba5780637d73b231146100b15780638a596ebe146100a85780639061b9231461009f578063a0126caa14610096578063a8e5fbc01461008d5763f4d4d2f80361000e576100886108ba565b61000e565b50610088610872565b50610088610848565b506100886107cb565b50610088610714565b506100886105ce565b5061008861056e565b506100886103bf565b50610088610124565b600080fd5b6001600160e01b031981165b036100d557565b905035906100fa826100da565b565b9061011091602081830312610113576100ed565b90565b61011b600080fd5b6100ed565b9052565b5034610157575b61015361014161013c3660046100fc565b6114c5565b60405191829182901515815260200190565b0390f35b61015f600080fd5b61012b565b806100e6565b905035906100fa82610164565b6001600160a01b031690565b6001600160a01b0381166100e6565b905035906100fa82610183565b601f01601f191690565b50634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176101e157604052565b6101e96101a9565b604052565b906100fa6101fb60405190565b92836101c0565b602080916001600160401b03811161021957020190565b6102216101a9565b020190565b6102446020916001600160401b03811161024857601f01601f191690565b0190565b61019f6101a9565b90826000939282370152565b9291906100fa9161027461026f83610226565b6101ee565b94828652602086019183820111156102505761028e600080fd5b610250565b906101109181601f820112156102af575b60208135910161025c565b6102b7600080fd5b6102a4565b909291926102cc61026f82610202565b938185526020808601920283019281841161032b575b80925b8484106102f3575050505050565b602080916103138587356001600160401b03811161031e575b8601610293565b8152019301926102e5565b610326600080fd5b61030c565b610333600080fd5b6102e2565b906101109181601f82011215610354575b6020813591016102bc565b61035c600080fd5b610349565b90916060828403126103b2575b61011061037b848461016a565b936103898160208601610192565b936040810135906001600160401b0382116103a5575b01610338565b6103ad600080fd5b61039f565b6103ba600080fd5b61036e565b50346103df575b6103da6103d4366004610361565b9161097d565b604051005b6103e7600080fd5b6103c6565b9061011091602081830312610421575b8035906001600160401b038211610414575b01610293565b61041c600080fd5b61040e565b610429600080fd5b6103fc565b60005b8381106104415750506000910152565b8181015183820152602001610431565b61047261019f60209361024493610466815190565b80835293849260200190565b9586910161042e565b9061011091610451565b9061049b610491835190565b8083529160200190565b90816104ad6020830284019460200190565b926000915b8383106104c157505050505090565b909192939460206104e46104dd8385600195038752895161047b565b9760200190565b93019301919392906104b2565b61011090610177906001600160a01b031682565b610110906104f1565b61011090610505565b6101209061050e565b90610110906020806105416040840160008701518582036000870152610485565b940151910190610517565b929160206105696100fa9360408701908782036000890152610520565b940152565b503461059e575b6105886105833660046103ec565b61149e565b9061015361059560405190565b9283928361054c565b6105a6600080fd5b610575565b60009103126105b657565b6100fa600080fd5b6020810192916100fa9190610517565b5034610611575b6105e03660046105ab565b6101537f00000000000000000000000000000000000000000000000000000000000000005b604051918291826105be565b610619600080fd5b6105d5565b909182601f83011215610659575b60208235926001600160401b03841161064c575b0192828401116105b657565b610654600080fd5b610640565b610661600080fd5b61062c565b9061068e9160208183031261069f575b8035906001600160401b038211610692575b0161061e565b9091565b61069a600080fd5b610688565b6106a7600080fd5b610676565b94906106ed610110979593610706956106e06106d86106f99560c08c01908c6000818403910152610451565b9260208b0152565b88820360408a0152610451565b60ff9093166060870152565b8482036080860152610451565b9160a0818403910152610451565b503461074b575b61015361073261072c366004610666565b9061109c565b9261074296949692919260405190565b968796876106ac565b610753600080fd5b61071b565b916040838303126107ad575b61068e6107838385356001600160401b0381116107a0575b860161061e565b9390946020810135906001600160401b038211610692570161061e565b6107a8600080fd5b61077c565b6107b5600080fd5b610764565b602080825261011092910190610451565b346107eb575b6107e86107df366004610758565b92919091610b0b565b50565b6107f3600080fd5b6107d1565b90610110916020818303121561016a57610810600080fd5b61016a565b61011090610177565b6101109054610815565b600161084261011092600090600052602052604060002090565b0161081e565b5034610865575b6101536106056108603660046107f8565b610828565b61086d600080fd5b61084f565b50346108ad575b6108843660046105ab565b6101537f0000000000000000000000000000000000000000000000000000000000000000610605565b6108b5600080fd5b610879565b50346108e7575b6101536108db6108d2366004610758565b92919091610dcb565b604051918291826107ba565b6108ef600080fd5b6108c1565b6101106101106101109290565b1561090857565b60405162461bcd60e51b815260206004820152600b60248201526a06e6f6465206973203078360ac1b6044820152606490fd5b0390fd5b1561094657565b60405162461bcd60e51b815260206004820152600f60248201526e37b7363c903737b2329037bbb732b960891b6044820152606490fd5b906100fa929161099b61099361011060006108f4565b821415610901565b6109c1336109bb6109ae61017785611532565b916001600160a01b031690565b1461093f565b611ce3565b61011091369161025c565b610120906001600160a01b031660601b90565b610244816014936109d1565b919061019f81610a07816102449560209181520190565b8095610250565b93610a2e610110969492610a3c94606088019188830360008a01526109f0565b9185830360208701526109f0565b916040818403910152610451565b90610a56610491835190565b9081610a686020830284019460200190565b926000915b838310610a7c57505050505090565b90919293946020610a986104dd8385600195038752895161047b565b9301930191939290610a6d565b916101109593610add610afe93610aeb93610ad060a088019260008901906001600160a01b03169052565b8682036020880152610a4a565b908482036040860152610451565b6001600160e01b03199094166060830152565b6080818403910152610451565b9060049450610b8090610b3a94610b8f94610b24606090565b50610b3261058384876109c6565b979097611532565b92610b63610b4760405190565b8095610b576020830191826109e4565b908103825203856101c0565b60405163f8c30f6360e01b9690998a976020890190815201610a0e565b602082018103825203836101c0565b61093b6000610b9d3061050e565b92015192631e9a9a5f60e31b81610bb360405190565b630556f18360e41b815295869560048701610aa5565b90939293848311610bf0575b8411610be3575b8101920390565b610beb600080fd5b610bdc565b610bf8600080fd5b610bd5565b919061011090604084820312610c44575b610c298185356001600160401b03811161031e578601610293565b936020810135906001600160401b0382116104145701610293565b610c4c600080fd5b610c0e565b6101109051610815565b905051906100fa826100da565b906101109160208183031215610c5b57610c80600080fd5b610c5b565b6040808252610110939192610c9c91840190610451565b916020818403910152610451565b506040513d6000823e3d90fd5b610cca610cc46101109290565b60e01b90565b6001600160e01b03191690565b15610cde57565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f2063616c6c6261636b2073656c6563746f7220666f756e640000000000006044820152606490fd5b9290610d40906101109593604086019186830360008801526109f0565b9260208185039101526109f0565b90610d5b61026f83610226565b918252565b3d15610d7a57610d6f3d610d4e565b903d6000602084013e565b606090565b15610d8657565b60405162461bcd60e51b815260206004820152601d60248201527f73746174696363616c6c20746f207665726966696572206661696c65640000006044820152606490fd5b9092610ec4610cca93610e8495610de0606090565b50600493610e06610dfe61068e83610df7896108f4565b8188610bc9565b810190610bfd565b93909260208781610e168761149e565b500196610e4d610e2d610e288a610c51565b61050e565b91610e5663077b4e3c91610e4060405190565b9a8b968795869560e01b90565b85528401610c85565b03915afa938415610f18575b600094610ede575b50610e9b610e28610eb59596610e9660009d8e9d8e610cb7565b6001600160e01b03198a161415610cd7565b610c51565b97610ea560405190565b9788966020880190815201610d23565b602082018103825203826101c0565b602081019051915afa610110610ed8610d60565b91610d7f565b610eb59450610e28610f09610e9b9260203d8111610f11575b610f0181836101c0565b810190610c68565b955050610e6a565b503d610ef7565b610f20610caa565b610e62565b9291906100fa91610f3861026f83610226565b948286526020860191838201111561042e57610f52600080fd5b61042e565b906101109181601f82011215610f73575b602081519101610f25565b610f7b600080fd5b610f68565b905051906100fa82610164565b60ff81166100e6565b905051906100fa82610f8d565b909160c08284031261107e575b610fcf8360008401516001600160401b038111611071575b8401610f57565b92610fdd8160208501610f80565b92610ffd8260408301516001600160401b038111611064575b8301610f57565b9261011061100e8460608501610f96565b9361102e8160808601516001600160401b038111611057575b8601610f57565b9360a0810151906001600160401b03821161104a575b01610f57565b611052600080fd5b611044565b61105f600080fd5b611027565b61106c600080fd5b610ff6565b611079600080fd5b610fc8565b611086600080fd5b610fb0565b6020808252610110939101916109f0565b916110d8919060006110c0610e2860206110b9610583878a6109c6565b5001610c51565b638a596ebe906110cf60405190565b95869260e01b90565b825281806110ea878a6004840161108b565b03915afa91821561119e575b600080808080959394929891979096611161575b5061111b6111309261112b926109c6565b61112560006108f4565b90611229565b611532565b9161115961113d60405190565b809461114d6020830191826109e4565b908103825203846101c0565b959493929190565b90955061118f919650611130945061112b935061111b973d8091833e61118781836101c0565b810190610fa3565b5096509691985096919361110a565b6111a6610caa565b6110f6565b50634e487b7160e01b600052601160045260246000fd5b919082039182116111cf57565b6100fa6111ab565b156111de57565b60405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606490fd5b01918252565b611233828261139d565b909161123f60006108f4565b938484146112a05750611253929350611229565b61127e9161128a9161126460405190565b938492602084019283602081611223610244938396959052565b908103825203826101c0565b61129c611295825190565b9160200190565b2090565b915061011092506112c86101106112b86112cc935190565b6112c260016108f4565b906111c2565b9190565b146111d7565b156112d957565b60405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606490fd5b50634e487b7160e01b600052603260045260246000fd5b906001602091611343845190565b811015611351575b02010190565b61135961131e565b61134b565b61136e6101106101109260ff1690565b60ff1690565b6101109060f81c61135e565b6101106101106101109260ff1690565b919082018092116111cf57565b611429610110919392936113af600090565b506113c56113be610110835190565b86106112d2565b6113f06113eb6113e66113d88885611335565b516001600160f81b03191690565b611374565b611380565b90816000916113fe836108f4565b82111561143957611423925061141d61141760016108f4565b89611390565b9061144b565b94611390565b61143360016108f4565b90611390565b5050611423906108f4565b156100d557565b60209061147061145b8585611390565b6114696112c8610110855190565b1115611444565b01012090565b61011060406101ee565b611488611476565b906060825260006020830152565b610110611480565b61068e906114aa611496565b506114b560006108f4565b6114bf8183611229565b91611fd2565b639061b92360e01b6001600160e01b03198216149081156114e4575090565b61011091506001600160e01b0319166301ffc9a760e01b1490565b905051906100fa82610183565b9061011091602081830312156114ff57611524600080fd5b6114ff565b610110906108f4565b611571919060206115627f000000000000000000000000000000000000000000000000000000000000000061050e565b6302571be3906110cf60405190565b82526004820184905260249082905afa928315611684575b600093611664575b50826115bc7f000000000000000000000000000000000000000000000000000000000000000061050e565b906115cf6001600160a01b0383166109ae565b146115d8575050565b6116189293509060209161160a6115f3636352211e93611529565b926115fd60405190565b9586948593849360e01b90565b835260048301526024820190565b03915afa908115611657575b60009161162f575090565b610110915060203d8111611650575b61164881836101c0565b81019061150c565b503d61163e565b61165f610caa565b611624565b61167d91935060203d81116116505761164881836101c0565b9138611591565b61168c610caa565b611589565b6101776101106101109290565b61011090611691565b156116ae57565b60405162461bcd60e51b81526020600482015260166024820152750766572696669657241646472657373206973203078360541b6044820152606490fd5b6116ff6116f96101109290565b60f81b90565b6001600160f81b03191690565b1561171357565b60405162461bcd60e51b815260206004820152602660248201527f766572696669657241646472657373206973206e6f74206120434349502056656044820152653934b334b2b960d11b6064820152608490fd5b1561176e57565b60405162461bcd60e51b815260206004820152602b60248201527f6174206c65617374206f6e6520676174657761792075726c2068617320746f2060448201526a1899481c1c9bdd9a59195960aa1b6064820152608490fd5b9061012090610815565b50634e487b7160e01b600052600060045260246000fd5b50634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611822575b602083101461181a57565b6100fa6117e8565b91607f169161180f565b9061183f90600019906020036008021c90565b8154169055565b9160001960089290920291821b911b5b9181191691161790565b9190611871610110611879936108f4565b908354611846565b9055565b6100fa91600091611860565b818110611894575050565b806118a2600060019361187d565b01611889565b600019600883021c1916906002021790565b906000916118d86118d082600052602060002090565b9283546118a8565b905555565b919290602082101561193557601f84116001146118ff576118799293506118a8565b50906119306100fa93600161192761191c85600052602060002090565b92601f602091010490565b82019101611889565b6118ba565b50611975829361194c600194600052602060002090565b61196e6020601f860104820192601f86168061197d575b50601f602091010490565b0190611889565b600202179055565b6119899088860361182c565b38611963565b929091602090600160401b83116119e4575b10156119d85760208110156119b957611879916118a8565b60019160ff19166119cf84600052602060002090565b55600202019055565b60019150600202019055565b6119ec6101a9565b6119a1565b9081546119fd816117ff565b90818311611a26575b818310611a14575b50505050565b611a1d936118dd565b38808080611a0e565b611a328383838761198f565b611a06565b60006100fa916119f1565b6100fa9115611a3757611a536117d1565b611a37565b818110611a63575050565b80611a716000600193611a42565b01611a58565b9091828110611a8557505050565b6100fa9290611a9a9092600052602060002090565b9081019101611a58565b906100fa91600160401b8211611ac0575b805490828155611a77565b611ac86101a9565b611ab5565b9190601f8111611adc57505050565b611aee6100fa93600052602060002090565b906020601f840181900483019310611b0e575b6020601f9091010461196e565b9091508190611b01565b90611b21815190565b906001600160401b038211611bde575b611b4582611b3f85546117ff565b85611acd565b602090601f8311600114611b7357611879929160009183611b68575b50506118a8565b015190503880611b61565b601f19831691611b8885600052602060002090565b9260005b818110611bc657509160029391856001969410611bad575b50505002019055565b01516000196008601f8516021c19169055388080611ba4565b91936020600181928787015181550195019201611b8c565b611be66101a9565b611b31565b906100fa91611b18565b611c20611c14611c03845190565b93611c0e8585611aa4565b60200190565b91600052602060002090565b6000915b838310611c315750505050565b6001602082611c48611c4284955190565b86611beb565b01920192019190611c24565b906100fa91611bf5565b906001600160a01b0390611856565b90611c7d6101106118799261050e565b8254611c5e565b90611cb0602060016100fa94611ca860008201611ca2600088015190565b90611c54565b019201610c51565b90611c6d565b906100fa91611c84565b6001600160a01b0390911681526101109160408201916020818403910152610a4a565b9091611dcf6000611d0a611cf96101778361169e565b6001600160a01b03871614156116a7565b611d718180610eb5611d4e633cfb793d60e11b611d2660405190565b6301ffc9a760e01b6020820152928391602483016001600160e01b0319909116815260200190565b805190602001895afa611d5f610d60565b81611e5d575b81611e0c575b5061170c565b611d8e611d7c845190565b611d886112c8846108f4565b11611767565b611dca84611d9b8761050e565b92611dbb611da7611476565b94611db28884880152565b602086016117c7565b90600052602052604060002090565b611cb6565b7f83c85f7f7423b99a5b5948f29e31a5d7087ef88402d6c71c09a63ee4c0a3af5d9192611e07611dfe60405190565b92839283611cc0565b0390a2565b9050611e56611e48611e386113d8611e22855190565b94611e326001966112c2886108f4565b90611335565b611e41846116ec565b16926116ec565b916001600160f81b03191690565b1438611d6b565b9050611e67815190565b611e746112c860206108f4565b1490611d65565b61011060006108f4565b90610d5b61026f83610202565b80546000939291611eaf611ea5836117ff565b8085529360200190565b9160018116908115611f015750600114611ec857505050565b611edb9192939450600052602060002090565b916000925b818410611eed5750500190565b805484840152602090930192600101611ee0565b92949550505060ff1916825215156020020190565b9061011091611e92565b906100fa611f3a92611f3160405190565b93848092611f16565b03836101c0565b61011090611f20565b90611f53825490565b611f5c81611e85565b92611f706020850191600052602060002090565b6000915b838310611f815750505050565b600160208192611f9085611f41565b815201920192019190611f74565b906100fa611fc06001611faf611476565b94610842611fbc82611f4a565b8752565b602084016117c7565b61011090611f9e565b909291611fdd611496565b50611fec6101106112b8845190565b8410156120615761201161200c6000928390600052602052604060002090565b611fc9565b90612021610e2860208401610c51565b6120306109ae6101778461169e565b0361205157505061204561068e92938261139d565b90506114bf8183611229565b61011092919450611125906108f4565b50915061011060009261112561208b61200c61207b611e7b565b8790600052602052604060002090565b946108f456fea2646970667358221220a428bba88e3c3faf7ef7890ccfb4a1984d97d93105b1fbeb2d7e1ed1b8c2dcb864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getVerifierOfDomain(bytes)": {
        "details": "This function allows retrieving the CCIP Verifier and its associated node for a given domain name. For subdomains, it will return the CCIP Verifier of the closest parent.",
        "params": {
          "name": "The domain name in bytes (dnsEncoded)"
        },
        "returns": {
          "_0": "_ccipVerifier The CCIP Verifier associated with the given domain name",
          "_1": "node The node associated with the given domain name"
        }
      },
      "metadata(bytes)": {
        "details": "This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.",
        "params": {
          "name": "The domain name in format (dnsEncoded)"
        },
        "returns": {
          "_0": "name The name of the resolver (\"CCIP RESOLVER\")",
          "_1": "coinType Resolvers coin type (60 for Ethereum)",
          "_2": "graphqlUrl The GraphQL URL used by the resolver",
          "_3": "storageType Storage Type (0 for EVM)",
          "_4": "storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.",
          "_5": "context can be l2 resolver contract address for evm chain but can be any l2 storage identifier for non-evm chain"
        }
      },
      "resolve(bytes,bytes)": {
        "params": {
          "data": "The ABI encoded data for the underlying resolution function (Eg, addr(bytes32), text(bytes32,string), etc).",
          "name": "The DNS-encoded name to resolve."
        },
        "returns": {
          "_0": "The return data, ABI encoded identically to the underlying function."
        }
      },
      "resolveWithProof(bytes,bytes)": {
        "details": "Function to resolve a domain name with proof using an off-chain callback mechanism.",
        "params": {
          "extraData": "The actual calldata that was called on the gateway.",
          "response": "The response received from off-chain resolution."
        },
        "returns": {
          "_0": "the result of the offchain lookup"
        }
      },
      "setVerifierForDomain(bytes32,address,string[])": {
        "params": {
          "node": "The domain node for which the CCIP Verifier is set.",
          "urls": "The gateway url that should handle the OffchainLookup.",
          "verifierAddress": "The address of the CcipResponseVerifier contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Implements the ERC-165 standard to check for interface support.",
        "params": {
          "interfaceID": "The interface identifier to check"
        },
        "returns": {
          "_0": "True if the contract supports the given interface, otherwise false"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getVerifierOfDomain(bytes)": {
        "notice": "Get the CCIP Verifier and node for a given domain name"
      },
      "metadata(bytes)": {
        "notice": "Get metadata about the CCIP Resolver"
      },
      "resolve(bytes,bytes)": {
        "notice": "Resolves arbitrary data for a particular name, as specified by ENSIP 10."
      },
      "setVerifierForDomain(bytes32,address,string[])": {
        "notice": "Sets a Cross-chain Information Protocol (CCIP) Verifier for a specific domain node."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports a specific interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6916,
        "contract": "contracts/ERC3668Resolver.sol:ERC3668Resolver",
        "label": "ccipVerifier",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(CcipVerifier)6876_storage)"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICcipResponseVerifier)7810": {
        "encoding": "inplace",
        "label": "contract ICcipResponseVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(CcipVerifier)6876_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ERC3668Resolver.CcipVerifier)",
        "numberOfBytes": "32",
        "value": "t_struct(CcipVerifier)6876_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CcipVerifier)6876_storage": {
        "encoding": "inplace",
        "label": "struct ERC3668Resolver.CcipVerifier",
        "members": [
          {
            "astId": 6872,
            "contract": "contracts/ERC3668Resolver.sol:ERC3668Resolver",
            "label": "gatewayUrls",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 6875,
            "contract": "contracts/ERC3668Resolver.sol:ERC3668Resolver",
            "label": "verifierAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ICcipResponseVerifier)7810"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}